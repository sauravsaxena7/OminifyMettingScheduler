{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Collection, Event, NotifyPropertyChanges, detach, Property, EventHandler } from '@syncfusion/ej2-base';\nimport { addClass, getUniqueID, rippleEffect, getComponent } from '@syncfusion/ej2-base';\nimport { attributes, Component, closest, select, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { classList, removeClass } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Popup } from '@syncfusion/ej2-popups';\nimport { upDownKeyHandler } from './../common/common';\nimport { getModel, Item, setBlankIconStyle } from './../common/common';\nvar classNames = {\n  DISABLED: 'e-disabled',\n  FOCUS: 'e-focused',\n  ICON: 'e-menu-icon',\n  ITEM: 'e-item',\n  POPUP: 'e-dropdown-popup',\n  RTL: 'e-rtl',\n  SEPARATOR: 'e-separator',\n  VERTICAL: 'e-vertical'\n};\n/**\n * DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n * It can contain both text and images.\n * ```html\n * <button id=\"element\">DropDownButton</button>\n * ```\n * ```typescript\n * <script>\n * var dropDownButtonObj = new DropDownButton({items: [{ text: 'Action1' }, { text: 'Action2' },{ text: 'Action3' }]);\n * dropDownButtonObj.appendTo(\"#element\");\n * </script>\n * ```\n */\n\nvar DropDownButton =\n/** @class */\nfunction (_super) {\n  __extends(DropDownButton, _super);\n  /**\n   * Constructor for creating the widget\n   *\n   * @param  {DropDownButtonModel} options - Specifies dropdown button model\n   * @param  {string|HTMLButtonElement} element - Specifies element\n   * @hidden\n   */\n\n\n  function DropDownButton(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isPopupCreated = true;\n    return _this;\n  }\n\n  DropDownButton.prototype.preRender = function () {\n    /** */\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Persist data\n   */\n\n\n  DropDownButton.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\n   * To open/close DropDownButton popup based on current state of the DropDownButton.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownButton.prototype.toggle = function () {\n    if (this.canOpen()) {\n      this.openPopUp();\n    } else {\n      this.closePopup();\n    }\n  };\n  /**\n   * Initialize the Component rendering\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  DropDownButton.prototype.render = function () {\n    this.initialize();\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.renderComplete();\n  };\n  /**\n   * Adds a new item to the menu. By default, new item appends to the list as the last item,\n   * but you can insert based on the text parameter.\n   *\n   * @param  { ItemModel[] } items - Specifies an array of JSON data.\n   * @param { string } text - Specifies the text to insert the newly added item in the menu.\n   * @returns {void}.\n   */\n\n\n  DropDownButton.prototype.addItems = function (items, text) {\n    var newItem;\n    var idx = this.items.length;\n\n    for (var j = 0, len = this.items.length; j < len; j++) {\n      if (text === this.items[j].text) {\n        idx = j;\n        break;\n      }\n    }\n\n    for (var i = items.length - 1; i >= 0; i--) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      newItem = new Item(this, 'items', items[i], true);\n      this.items.splice(idx, 0, newItem);\n    }\n\n    if (!this.canOpen()) {\n      this.createItems();\n    }\n  };\n  /**\n   * Removes the items from the menu.\n   *\n   * @param  { string[] } items - Specifies an array of string to remove the items.\n   * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.\n   * @returns {void}.\n   */\n\n\n  DropDownButton.prototype.removeItems = function (items, isUniqueId) {\n    var refresh = false;\n\n    for (var i = 0, len = items.length; i < len; i++) {\n      for (var j = 0, len_1 = this.items.length; j < len_1; j++) {\n        if (items[i] === (isUniqueId ? this.items[j].id : this.items[j].text)) {\n          this.items.splice(j, 1);\n          refresh = true;\n          break;\n        }\n      }\n    }\n\n    if (refresh && this.getULElement()) {\n      this.createItems();\n    }\n  };\n\n  DropDownButton.prototype.createPopup = function () {\n    var _a;\n\n    var div = this.createElement('div', {\n      className: classNames.POPUP,\n      id: this.element.id + '-popup'\n    });\n    document.body.appendChild(div);\n    this.dropDown = new Popup(div, {\n      relateTo: this.element,\n      collision: {\n        X: 'fit',\n        Y: 'flip'\n      },\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      targetType: 'relative',\n      content: this.target ? this.getTargetElement() : '',\n      enableRtl: this.enableRtl\n    });\n\n    if (this.dropDown.element.style.position === 'fixed') {\n      this.dropDown.refreshPosition(this.element);\n    }\n\n    this.dropDown.hide();\n    attributes(this.element, (_a = {}, _a['aria-haspopup'] = this.items.length || this.target ? 'true' : 'false', _a['aria-expanded'] = 'false', _a['aria-owns'] = this.getPopUpElement().id, _a['type'] = 'button', _a['aria-label'] = this.element.textContent + ' dropdownbutton', _a));\n\n    if (this.cssClass) {\n      addClass([div], this.cssClass.split(' '));\n    }\n\n    this.isPopupCreated = true;\n  };\n\n  DropDownButton.prototype.getTargetElement = function () {\n    return typeof this.target === 'string' ? select(this.target) : this.target;\n  };\n\n  DropDownButton.prototype.createItems = function (appendItems) {\n    var items = this.items;\n    var showIcon = this.hasIcon(this.items, 'iconCss');\n    var span;\n    var item;\n    var li;\n    var eventArgs;\n    var ul = this.getULElement();\n\n    if (ul) {\n      ul.innerHTML = '';\n    } else {\n      ul = this.createElement('ul', {\n        attrs: {\n          'role': 'menu',\n          'tabindex': '0'\n        }\n      });\n    }\n\n    for (var i = 0; i < items.length; i++) {\n      item = items[i];\n      var tempItem = item.text;\n      li = this.createElement('li', {\n        className: item.separator ? classNames.ITEM + ' ' + classNames.SEPARATOR : classNames.ITEM,\n        attrs: {\n          'role': 'menuItem',\n          'tabindex': '-1'\n        },\n        id: item.id ? item.id : getUniqueID('e-' + this.getModuleName() + '-item')\n      });\n\n      if (this.enableHtmlSanitizer) {\n        li.textContent = item.url ? '' : tempItem;\n      } else {\n        li.innerHTML = item.url ? '' : tempItem;\n      }\n\n      if (item.url) {\n        li.appendChild(this.createAnchor(item));\n        li.classList.add('e-url');\n      }\n\n      if (item.iconCss) {\n        span = this.createElement('span', {\n          className: classNames.ICON + ' ' + item.iconCss\n        });\n\n        if (item.url) {\n          li.childNodes[0].appendChild(span);\n        } else {\n          li.insertBefore(span, li.childNodes[0]);\n        }\n      } else {\n        if (showIcon && !item.separator) {\n          li.classList.add('e-blank-icon');\n        }\n      }\n\n      if (item.disabled) {\n        li.classList.add('e-disabled');\n      }\n\n      eventArgs = {\n        item: item,\n        element: li\n      };\n      this.trigger('beforeItemRender', eventArgs);\n      ul.appendChild(li);\n    }\n\n    if (appendItems) {\n      this.getPopUpElement().appendChild(ul);\n    }\n\n    if (showIcon) {\n      setBlankIconStyle(this.getPopUpElement());\n    }\n  };\n\n  DropDownButton.prototype.hasIcon = function (items, field) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      if (items[i][field]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  DropDownButton.prototype.createAnchor = function (item) {\n    var tempItem = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.text) : item.text;\n    return this.createElement('a', {\n      className: 'e-menu-text e-menu-url',\n      innerHTML: tempItem,\n      attrs: {\n        'href': item.url\n      }\n    });\n  };\n\n  DropDownButton.prototype.initialize = function () {\n    this.button = new Button({\n      iconCss: this.iconCss,\n      iconPosition: this.iconPosition,\n      cssClass: this.cssClass,\n      content: this.content,\n      disabled: this.disabled,\n      enableRtl: this.enableRtl,\n      enablePersistence: this.enablePersistence\n    });\n    this.button.createElement = this.createElement;\n    this.button.appendTo(this.element);\n\n    if (!this.element.id) {\n      this.element.id = getUniqueID('e-' + this.getModuleName());\n    }\n\n    this.appendArrowSpan();\n    this.setActiveElem([this.element]);\n\n    if (this.target && !this.isColorPicker() || !this.createPopupOnClick) {\n      this.createPopup();\n    } else {\n      this.isPopupCreated = false;\n    }\n  };\n\n  DropDownButton.prototype.isColorPicker = function () {\n    if (!this.element) {\n      return false;\n    }\n\n    var prevElem = this.element.previousSibling;\n\n    if (prevElem && prevElem.classList && prevElem.classList.contains('e-split-colorpicker')) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DropDownButton.prototype.appendArrowSpan = function () {\n    this.element.appendChild(this.createElement('span', {\n      className: 'e-btn-icon e-icons ' + 'e-icon-' + (this.cssClass.indexOf(classNames.VERTICAL) > -1 ? 'bottom' : 'right') + ' e-caret'\n    }));\n  };\n\n  DropDownButton.prototype.setActiveElem = function (elem) {\n    this.activeElem = elem;\n  };\n  /**\n   * Get component name.\n   *\n   * @returns {string} - Module Name\n   * @private\n   */\n\n\n  DropDownButton.prototype.getModuleName = function () {\n    return 'dropdown-btn';\n  };\n\n  DropDownButton.prototype.canOpen = function () {\n    var val = false;\n\n    if (this.isPopupCreated) {\n      val = this.getPopUpElement().classList.contains('e-popup-close');\n    }\n\n    return val;\n  };\n  /**\n   * Destroys the widget.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownButton.prototype.destroy = function () {\n    var _this = this;\n\n    _super.prototype.destroy.call(this);\n\n    if (this.getModuleName() === 'dropdown-btn') {\n      var classList_1;\n\n      if (this.element.querySelector('span.e-caret')) {\n        detach(this.element.querySelector('span.e-caret'));\n      }\n\n      if (this.cssClass) {\n        classList_1 = this.cssClass.split(' ');\n      }\n\n      this.button.destroy();\n\n      if (classList_1) {\n        removeClass([this.element], classList_1);\n      }\n\n      removeClass(this.activeElem, ['e-active']);\n      var attrList = this.element.getAttribute('class') ? ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type'] : ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type', 'class'];\n      attrList.forEach(function (key) {\n        _this.element.removeAttribute(key);\n      });\n      this.popupUnWireEvents();\n      this.destroyPopup();\n      this.isPopupCreated = false;\n\n      if (!this.disabled) {\n        this.unWireEvents();\n      }\n    }\n  };\n\n  DropDownButton.prototype.destroyPopup = function () {\n    if (this.isPopupCreated) {\n      this.dropDown.destroy();\n\n      if (this.getPopUpElement()) {\n        var popupEle = document.getElementById(this.getPopUpElement().id);\n\n        if (popupEle) {\n          removeClass([popupEle], ['e-popup-open', 'e-popup-close']);\n          detach(popupEle);\n        }\n      }\n\n      EventHandler.remove(this.getPopUpElement(), 'click', this.clickHandler);\n      EventHandler.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);\n\n      if (this.isPopupCreated) {\n        this.dropDown = undefined;\n      }\n    }\n\n    this.isPopupCreated = false;\n  };\n\n  DropDownButton.prototype.getPopUpElement = function () {\n    var val = null;\n\n    if (this.dropDown) {\n      val = this.dropDown.element;\n    }\n\n    return val;\n  };\n\n  DropDownButton.prototype.getULElement = function () {\n    var val = null;\n\n    if (this.getPopUpElement()) {\n      val = this.getPopUpElement().children[0];\n    }\n\n    return val;\n  };\n\n  DropDownButton.prototype.wireEvents = function () {\n    this.delegateMousedownHandler = this.mousedownHandler.bind(this);\n\n    if (!this.createPopupOnClick) {\n      EventHandler.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);\n    }\n\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    EventHandler.add(this.element, 'keydown', this.keyBoardHandler, this);\n  };\n\n  DropDownButton.prototype.popupWireEvents = function () {\n    var popupElement = this.getPopUpElement();\n\n    if (this.createPopupOnClick) {\n      EventHandler.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);\n    }\n\n    if (popupElement) {\n      EventHandler.add(popupElement, 'click', this.clickHandler, this);\n      EventHandler.add(popupElement, 'keydown', this.keyBoardHandler, this);\n    }\n\n    this.rippleFn = rippleEffect(popupElement, {\n      selector: '.' + classNames.ITEM\n    });\n  };\n\n  DropDownButton.prototype.popupUnWireEvents = function () {\n    var popupElement = this.getPopUpElement();\n\n    if (this.createPopupOnClick) {\n      EventHandler.remove(document, 'mousedown touchstart', this.delegateMousedownHandler);\n    }\n\n    if (popupElement && popupElement.parentElement) {\n      EventHandler.remove(popupElement, 'click', this.clickHandler);\n      EventHandler.remove(popupElement, 'keydown', this.keyBoardHandler);\n    }\n  };\n  /**\n   * Handles the keyboard interactions.\n   *\n   * @param {KeyboardEventArgs} e - Specifies keyboard event args.\n   * @returns {void}\n   * @hidden\n   */\n\n\n  DropDownButton.prototype.keyBoardHandler = function (e) {\n    if (e.target === this.element && (e.keyCode === 9 || !e.altKey && e.keyCode === 40 || e.keyCode === 38)) {\n      return;\n    }\n\n    switch (e.keyCode) {\n      case 38:\n      case 40:\n        if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {\n          this.keyEventHandler(e);\n        } else {\n          this.upDownKeyHandler(e);\n        }\n\n        break;\n\n      case 9:\n      case 13:\n      case 27:\n      case 32:\n        this.keyEventHandler(e);\n        break;\n    }\n  };\n\n  DropDownButton.prototype.upDownKeyHandler = function (e) {\n    if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {\n      return;\n    }\n\n    e.preventDefault();\n    upDownKeyHandler(this.getULElement(), e.keyCode);\n  };\n\n  DropDownButton.prototype.keyEventHandler = function (e) {\n    if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {\n      return;\n    }\n\n    if (e.target && e.target.className.indexOf('e-edit-template') > -1 && e.keyCode === 32) {\n      return;\n    }\n\n    if (e.keyCode !== 9) {\n      e.preventDefault();\n    }\n\n    if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {\n      if (!this.canOpen()) {\n        this.closePopup(e, this.element);\n      }\n    } else {\n      this.clickHandler(e);\n    }\n  };\n\n  DropDownButton.prototype.getLI = function (elem) {\n    return elem.tagName === 'LI' ? elem : closest(elem, 'li');\n  };\n\n  DropDownButton.prototype.mousedownHandler = function (e) {\n    var trgt = e.target;\n\n    if (this.dropDown && !this.canOpen() && !(closest(trgt, '[id=\"' + this.getPopUpElement().id + '\"]') || closest(trgt, '[id=\"' + this.element.id + '\"]'))) {\n      this.closePopup(e);\n    }\n  };\n\n  DropDownButton.prototype.clickHandler = function (e) {\n    var trgt = e.target;\n\n    if (closest(trgt, '[id=\"' + this.element.id + '\"]')) {\n      if (!this.createPopupOnClick || this.target && !this.isColorPicker()) {\n        if (this.getPopUpElement().classList.contains('e-popup-close')) {\n          this.openPopUp(e);\n        } else {\n          this.closePopup(e);\n        }\n      } else if (this.isPopupCreated) {\n        this.closePopup(e, this.activeElem[0]);\n      } else {\n        this.createPopup();\n        this.openPopUp(e);\n      }\n    } else {\n      if (closest(trgt, '[id=\"' + this.getPopUpElement().id + '\"]')) {\n        var eventArgs = void 0;\n        var liIdx = void 0;\n        var item = void 0;\n        var li = this.getLI(trgt);\n\n        if (li) {\n          liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);\n          item = this.items[liIdx];\n\n          if (item) {\n            eventArgs = {\n              element: li,\n              item: item\n            };\n            this.trigger('select', eventArgs);\n          }\n\n          this.closePopup(e, this.activeElem[0]);\n        }\n      }\n    }\n  };\n\n  DropDownButton.prototype.openPopUp = function (e) {\n    var _this = this;\n\n    if (e === void 0) {\n      e = null;\n    }\n\n    var isReact = false;\n    var popupElem = this.getPopUpElement();\n\n    if (!this.target) {\n      this.createItems(true);\n    } else {\n      if (this.activeElem.length > 1) {\n        var splitButton = getComponent(this.activeElem[0], 'split-btn'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        if (splitButton.isReact && popupElem.childNodes.length < 1) {\n          isReact = true; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          splitButton.appendReactElement(this.getTargetElement(), this.getPopUpElement());\n          this.renderReactTemplates();\n        }\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isReact && popupElem.childNodes.length < 1) {\n          isReact = true; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          this.appendReactElement(this.getTargetElement(), this.getPopUpElement());\n          this.renderReactTemplates();\n        }\n      }\n    }\n\n    var ul = this.getULElement();\n    this.popupWireEvents();\n    var beforeOpenArgs = {\n      element: ul,\n      items: this.items,\n      event: e,\n      cancel: false\n    };\n    this.trigger('beforeOpen', beforeOpenArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        var ul_1 = _this.getULElement();\n\n        _this.dropDown.show(null, _this.element);\n\n        addClass([_this.element], 'e-active');\n\n        _this.element.setAttribute('aria-expanded', 'true');\n\n        ul_1.focus();\n        var openArgs = {\n          element: ul_1,\n          items: _this.items\n        };\n\n        _this.trigger('open', openArgs);\n      }\n    });\n  };\n\n  DropDownButton.prototype.closePopup = function (e, focusEle) {\n    var _this = this;\n\n    if (e === void 0) {\n      e = null;\n    }\n\n    var ul = this.getULElement();\n    var beforeCloseArgs = {\n      element: ul,\n      items: this.items,\n      event: e,\n      cancel: false\n    };\n    var popupElement = this.getPopUpElement();\n\n    if (popupElement) {\n      EventHandler.remove(popupElement, 'keydown', this.keyBoardHandler);\n    }\n\n    this.trigger('beforeClose', beforeCloseArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        _this.popupUnWireEvents();\n\n        var ul_2 = _this.getULElement();\n\n        var selectedLi = ul_2.querySelector('.e-selected');\n\n        if (selectedLi) {\n          selectedLi.classList.remove('e-selected');\n        }\n\n        _this.dropDown.hide();\n\n        removeClass(_this.activeElem, 'e-active');\n\n        _this.element.setAttribute('aria-expanded', 'false');\n\n        if (focusEle) {\n          focusEle.focus();\n        }\n\n        var closeArgs = {\n          element: ul_2,\n          items: _this.items\n        };\n\n        _this.trigger('close', closeArgs);\n\n        if (!_this.target && ul_2) {\n          detach(ul_2);\n        }\n\n        if (!_this.target || _this.isColorPicker()) {\n          if (_this.createPopupOnClick) {\n            _this.destroyPopup();\n          }\n        }\n\n        if (_this.target) {\n          _this.isPopupCreated = _this.createPopupOnClick ? false : true;\n        }\n      }\n    });\n  };\n\n  DropDownButton.prototype.unWireEvents = function () {\n    if (!this.createPopupOnClick) {\n      EventHandler.remove(document, 'mousedown touchstart', this.delegateMousedownHandler);\n    }\n\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    EventHandler.remove(this.element, 'keydown', this.keyBoardHandler);\n\n    if (this.isPopupCreated) {\n      EventHandler.remove(this.getPopUpElement(), 'click', this.clickHandler);\n      EventHandler.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);\n    }\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param  {DropDownButtonModel} newProp - Specifies new properties\n   * @param  {DropDownButtonModel} oldProp - Specifies old properties\n   * @returns {void}\n   * @private\n   */\n\n\n  DropDownButton.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var btnModel = ['content', 'cssClass', 'iconCss', 'iconPosition', 'disabled', 'enableRtl'];\n    this.button.setProperties(getModel(newProp, btnModel));\n    var popupElement;\n\n    if (this.isPopupCreated) {\n      popupElement = this.getPopUpElement();\n      this.dropDown.setProperties(getModel(newProp, ['enableRtl']));\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'content':\n          if (!this.element.querySelector('span.e-caret')) {\n            this.appendArrowSpan();\n          }\n\n          break;\n\n        case 'disabled':\n          if (newProp.disabled) {\n            this.unWireEvents();\n\n            if (this.isPopupCreated && !this.canOpen()) {\n              this.closePopup();\n            }\n          } else {\n            this.wireEvents();\n          }\n\n          break;\n\n        case 'cssClass':\n          if (newProp.cssClass.indexOf(classNames.VERTICAL) > -1) {\n            var arrowSpan = this.element.querySelector('span.e-caret');\n            classList(arrowSpan, ['e-icon-bottom'], ['e-icon-right']);\n          }\n\n          if (this.isPopupCreated) {\n            if (oldProp.cssClass) {\n              removeClass([popupElement], oldProp.cssClass.split(' '));\n            }\n\n            if (newProp.cssClass) {\n              addClass([popupElement], newProp.cssClass.split(' '));\n            }\n          }\n\n          break;\n\n        case 'target':\n          this.dropDown.content = this.getTargetElement();\n          this.dropDown.dataBind();\n          break;\n\n        case 'items':\n          if (this.isPopupCreated && this.getULElement()) {\n            this.createItems();\n          }\n\n          break;\n\n        case 'createPopupOnClick':\n          if (newProp.createPopupOnClick) {\n            this.destroyPopup();\n          } else {\n            this.createPopup();\n          }\n\n          break;\n      }\n    }\n  };\n  /**\n   * Sets the focus to DropDownButton\n   * its native method\n   *\n   * @public\n   * @returns {void}\n   */\n\n\n  DropDownButton.prototype.focusIn = function () {\n    this.element.focus();\n  };\n\n  __decorate([Property('')], DropDownButton.prototype, \"content\", void 0);\n\n  __decorate([Property('')], DropDownButton.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], DropDownButton.prototype, \"disabled\", void 0);\n\n  __decorate([Property('')], DropDownButton.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('Left')], DropDownButton.prototype, \"iconPosition\", void 0);\n\n  __decorate([Property(false)], DropDownButton.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Collection([], Item)], DropDownButton.prototype, \"items\", void 0);\n\n  __decorate([Property(false)], DropDownButton.prototype, \"createPopupOnClick\", void 0);\n\n  __decorate([Property('')], DropDownButton.prototype, \"target\", void 0);\n\n  __decorate([Event()], DropDownButton.prototype, \"beforeItemRender\", void 0);\n\n  __decorate([Event()], DropDownButton.prototype, \"beforeOpen\", void 0);\n\n  __decorate([Event()], DropDownButton.prototype, \"beforeClose\", void 0);\n\n  __decorate([Event()], DropDownButton.prototype, \"close\", void 0);\n\n  __decorate([Event()], DropDownButton.prototype, \"open\", void 0);\n\n  __decorate([Event()], DropDownButton.prototype, \"select\", void 0);\n\n  __decorate([Event()], DropDownButton.prototype, \"created\", void 0);\n\n  DropDownButton = __decorate([NotifyPropertyChanges], DropDownButton);\n  return DropDownButton;\n}(Component);\n\nexport { DropDownButton };","map":null,"metadata":{},"sourceType":"module"}