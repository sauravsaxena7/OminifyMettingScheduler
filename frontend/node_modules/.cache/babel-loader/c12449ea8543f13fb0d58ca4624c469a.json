{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Event } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, Property, addClass } from '@syncfusion/ej2-base';\nimport { SignatureBase } from '../common/signature-base';\n/**\n * The Signature component allows user to draw smooth signatures as vector outline of strokes using variable width bezier curve interpolation.\n * It allows to save signature as image.\n * You can use your finger, pen, or mouse on a tablet, touchscreen, etc., to draw your own signature on this Signature component.\n * Signature component is a user interface to draw the Signature or Text.\n * It provides supports for various Background color, Stroke color and Background Image.\n * ```html\n * <canvas id=\"signature\"></canvas>\n * ```\n * ```typescript\n * <script>\n *   let signatureObj: Signature = new Signature(null , \"#signature\");\n * </script>\n * ```\n */\n\nvar Signature =\n/** @class */\nfunction (_super) {\n  __extends(Signature, _super);\n  /**\n   * Constructor for creating the widget.\n   *\n   * @param {SignatureModel} options - Specifies the Signature model.\n   * @param {string | HTMLCanvasElement} element - Specifies the element.\n   * @private\n   */\n\n\n  function Signature(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n\n  Signature.prototype.preRender = function () {// pre render code snippets\n  };\n  /**\n   * To Initialize the component rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  Signature.prototype.render = function () {\n    this.initialize();\n  };\n\n  Signature.prototype.initialize = function () {\n    addClass([this.element], 'e-' + this.getModuleName());\n\n    _super.prototype.initialize.call(this, this.element);\n\n    if (this.enablePersistence) {\n      this.loadPersistedSignature();\n    }\n  };\n  /**\n   * To get component name.\n   *\n   * @returns {string} - Module Name\n   * @private\n   */\n\n\n  Signature.prototype.getModuleName = function () {\n    return 'signature';\n  };\n  /**\n   * To get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Persist data\n   */\n\n\n  Signature.prototype.getPersistData = function () {\n    return this.addOnPersist(['signatureValue']);\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param  {SignatureModel} newProp - Specifies new properties\n   * @param  {SignatureModel} oldProp - Specifies old properties\n   * @returns {void}\n   * @private\n   */\n\n\n  Signature.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'backgroundColor':\n          _super.prototype.propertyChanged.call(this, prop, newProp.backgroundColor);\n\n          break;\n\n        case 'backgroundImage':\n          _super.prototype.propertyChanged.call(this, prop, newProp.backgroundImage);\n\n          break;\n\n        case 'strokeColor':\n          if (newProp.strokeColor !== oldProp.strokeColor) {\n            _super.prototype.propertyChanged.call(this, prop, newProp.strokeColor);\n          }\n\n          break;\n\n        case 'saveWithBackground':\n          _super.prototype.propertyChanged.call(this, prop, newProp.saveWithBackground);\n\n          break;\n\n        case 'isReadOnly':\n          _super.prototype.propertyChanged.call(this, prop, newProp.isReadOnly);\n\n          break;\n\n        case 'disabled':\n          _super.prototype.propertyChanged.call(this, prop, newProp.disabled);\n\n          break;\n      }\n    }\n  };\n\n  __decorate([Property('')], Signature.prototype, \"backgroundColor\", void 0);\n\n  __decorate([Property('')], Signature.prototype, \"backgroundImage\", void 0);\n\n  __decorate([Property(false)], Signature.prototype, \"disabled\", void 0);\n\n  __decorate([Property(false)], Signature.prototype, \"isReadOnly\", void 0);\n\n  __decorate([Property(true)], Signature.prototype, \"saveWithBackground\", void 0);\n\n  __decorate([Property('#000000')], Signature.prototype, \"strokeColor\", void 0);\n\n  __decorate([Property(0.5)], Signature.prototype, \"minStrokeWidth\", void 0);\n\n  __decorate([Property(2)], Signature.prototype, \"maxStrokeWidth\", void 0);\n\n  __decorate([Property(0.7)], Signature.prototype, \"velocity\", void 0);\n\n  __decorate([Property('en-US')], Signature.prototype, \"locale\", void 0);\n\n  __decorate([Property(false)], Signature.prototype, \"enableRtl\", void 0);\n\n  __decorate([Property(false)], Signature.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Event()], Signature.prototype, \"beforeSave\", void 0);\n\n  __decorate([Event()], Signature.prototype, \"change\", void 0);\n\n  __decorate([Event()], Signature.prototype, \"created\", void 0);\n\n  Signature = __decorate([NotifyPropertyChanges], Signature);\n  return Signature;\n}(SignatureBase);\n\nexport { Signature };","map":null,"metadata":{},"sourceType":"module"}