{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { isUndefined, getValue, isNullOrUndefined, setValue, uniqueID, isBlazor } from './util';\nimport { ModuleLoader } from './module-loader';\nimport { Base } from './base';\nimport { Observer } from './observer';\nimport { ChildProperty } from './child-property';\nimport { Property, NotifyPropertyChanges } from './notify-property-change';\nimport { onIntlChange, rightToLeft, defaultCulture } from './internationalization';\nimport { createElement, addClass, removeClass, select } from './dom';\nimport { validateLicense } from './validate-lic';\nvar componentCount = 0;\nvar lastPageID;\nvar lastHistoryLen = 0;\nexport var versionBasedStatePersistence = false;\n/**\n * To enable or disable version based statePersistence functionality for all components globally.\n *\n * @param {boolean} status - Optional argument Specifies the status value to enable or disable versionBasedStatePersistence option.\n * @returns {void}\n */\n\nexport function enableVersionBasedPersistence(status) {\n  versionBasedStatePersistence = status;\n}\n/**\n * Base class for all Essential JavaScript components\n */\n\nvar Component =\n/** @class */\nfunction (_super) {\n  __extends(Component, _super);\n  /**\n   * Initialize the constructor for component base\n   *\n   * @param {Object} options ?\n   * @param {string} selector ?\n   */\n\n\n  function Component(options, selector) {\n    var _this = _super.call(this, options, selector) || this;\n\n    _this.randomId = uniqueID();\n    /**\n     * string template option for Blazor template rendering\n     *\n     * @private\n     */\n\n    _this.isStringTemplate = false;\n    _this.needsID = false;\n    _this.isReactHybrid = false;\n\n    if (isNullOrUndefined(_this.enableRtl)) {\n      _this.setProperties({\n        'enableRtl': rightToLeft\n      }, true);\n    }\n\n    if (isNullOrUndefined(_this.locale)) {\n      _this.setProperties({\n        'locale': defaultCulture\n      }, true);\n    }\n\n    _this.moduleLoader = new ModuleLoader(_this);\n    _this.localObserver = new Observer(_this); // tslint:disable-next-line:no-function-constructor-with-string-args\n\n    onIntlChange.on('notifyExternalChange', _this.detectFunction, _this, _this.randomId);\n\n    if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n      validateLicense();\n    }\n\n    if (!isUndefined(selector)) {\n      _this.appendTo();\n    }\n\n    return _this;\n  }\n\n  Component.prototype.requiredModules = function () {\n    return [];\n  };\n  /**\n   * Destroys the sub modules while destroying the widget\n   *\n   * @returns {void} ?\n   */\n\n\n  Component.prototype.destroy = function () {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.enablePersistence) {\n      this.setPersistData();\n    }\n\n    this.localObserver.destroy();\n\n    if (this.refreshing) {\n      return;\n    }\n\n    removeClass([this.element], ['e-control']);\n    this.trigger('destroyed', {\n      cancel: false\n    });\n\n    _super.prototype.destroy.call(this);\n\n    this.moduleLoader.clean();\n    onIntlChange.off('notifyExternalChange', this.detectFunction, this.randomId);\n  };\n  /**\n   * Applies all the pending property changes and render the component again.\n   *\n   * @returns {void} ?\n   */\n\n\n  Component.prototype.refresh = function () {\n    this.refreshing = true;\n    this.moduleLoader.clean();\n    this.destroy();\n    this.clearChanges();\n    this.localObserver = new Observer(this);\n    this.preRender();\n    this.injectModules();\n    this.render();\n    this.refreshing = false;\n  };\n\n  Component.prototype.accessMount = function () {\n    if (this.mount && !this.isReactHybrid) {\n      this.mount();\n    }\n  };\n  /**\n   * Returns the route element of the component\n   *\n   * @returns {HTMLElement} ?\n   */\n\n\n  Component.prototype.getRootElement = function () {\n    if (this.isReactHybrid) {\n      // eslint-disable-next-line\n      return this.actualElement;\n    } else {\n      return this.element;\n    }\n  };\n  /**\n   * Returns the persistence data for component\n   *\n   * @returns {any} ?\n   */\n  // eslint-disable-next-line\n\n\n  Component.prototype.getLocalData = function () {\n    var eleId = this.getModuleName() + this.element.id;\n\n    if (versionBasedStatePersistence) {\n      return window.localStorage.getItem(eleId + this.ej2StatePersistenceVersion);\n    } else {\n      return window.localStorage.getItem(eleId);\n    }\n  };\n  /**\n   * Appends the control within the given HTML element\n   *\n   * @param {string | HTMLElement} selector - Target element where control needs to be appended\n   * @returns {void} ?\n   */\n\n\n  Component.prototype.appendTo = function (selector) {\n    if (!isNullOrUndefined(selector) && typeof selector === 'string') {\n      this.element = select(selector, document);\n    } else if (!isNullOrUndefined(selector)) {\n      this.element = selector;\n    }\n\n    if (!isNullOrUndefined(this.element)) {\n      var moduleClass = 'e-' + this.getModuleName().toLowerCase();\n      addClass([this.element], ['e-control', moduleClass]);\n      this.isProtectedOnChange = false;\n\n      if (this.needsID && !this.element.id) {\n        this.element.id = this.getUniqueID(this.getModuleName());\n      }\n\n      if (this.enablePersistence) {\n        this.mergePersistData();\n        window.addEventListener('unload', this.setPersistData.bind(this));\n      }\n\n      var inst = getValue('ej2_instances', this.element);\n\n      if (!inst || inst.indexOf(this) === -1) {\n        _super.prototype.addInstance.call(this);\n      }\n\n      this.preRender();\n      this.injectModules();\n      this.render();\n\n      if (!this.mount) {\n        this.trigger('created');\n      } else {\n        this.accessMount();\n      }\n    }\n  };\n  /**\n   * It is used to process the post rendering functionalities to a component.\n   *\n   * @param {Node} wrapperElement ?\n   * @returns {void} ?\n   */\n\n\n  Component.prototype.renderComplete = function (wrapperElement) {\n    if (isBlazor()) {\n      var sfBlazor = 'sfBlazor'; // eslint-disable-next-line\n\n      window[sfBlazor].renderComplete(this.element, wrapperElement);\n    }\n\n    this.isRendered = true;\n  };\n  /**\n   * When invoked, applies the pending property changes immediately to the component.\n   *\n   * @returns {void} ?\n   */\n\n\n  Component.prototype.dataBind = function () {\n    this.injectModules();\n\n    _super.prototype.dataBind.call(this);\n  };\n  /**\n   * Attach one or more  event handler to the current component context.\n   * It is used for internal handling event internally within the component only.\n   *\n   * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.\n   * @param {Function} handler - optional parameter Specifies the handler to run when the event occurs\n   * @param {Object} context - optional parameter Specifies the context to be bind in the handler.\n   * @returns {void} ?\n   * @private\n   */\n\n\n  Component.prototype.on = function (event, handler, context) {\n    if (typeof event === 'string') {\n      this.localObserver.on(event, handler, context);\n    } else {\n      for (var _i = 0, event_1 = event; _i < event_1.length; _i++) {\n        var arg = event_1[_i];\n        this.localObserver.on(arg.event, arg.handler, arg.context);\n      }\n    }\n  };\n  /**\n   * To remove one or more event handler that has been attached with the on() method.\n   *\n   * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.\n   * @param {Function} handler - optional parameter Specifies the function to run when the event occurs\n   * @returns {void} ?\n   * @private\n   */\n\n\n  Component.prototype.off = function (event, handler) {\n    if (typeof event === 'string') {\n      this.localObserver.off(event, handler);\n    } else {\n      for (var _i = 0, event_2 = event; _i < event_2.length; _i++) {\n        var arg = event_2[_i];\n        this.localObserver.off(arg.event, arg.handler);\n      }\n    }\n  };\n  /**\n   * To notify the handlers in the specified event.\n   *\n   * @param {string} property - Specifies the event to be notify.\n   * @param {Object} argument - Additional parameters to pass while calling the handler.\n   * @returns {void} ?\n   * @private\n   */\n\n\n  Component.prototype.notify = function (property, argument) {\n    if (this.isDestroyed !== true) {\n      this.localObserver.notify(property, argument);\n    }\n  };\n  /**\n   * Get injected modules\n   *\n   * @returns {Function} ?\n   * @private\n   */\n\n\n  Component.prototype.getInjectedModules = function () {\n    return this.injectedModules;\n  };\n  /**\n   * Dynamically injects the required modules to the component.\n   *\n   * @param {Function} moduleList ?\n   * @returns {void} ?\n   */\n\n\n  Component.Inject = function () {\n    var moduleList = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      moduleList[_i] = arguments[_i];\n    }\n\n    if (!this.prototype.injectedModules) {\n      this.prototype.injectedModules = [];\n    }\n\n    for (var i = 0; i < moduleList.length; i++) {\n      if (this.prototype.injectedModules.indexOf(moduleList[i]) === -1) {\n        this.prototype.injectedModules.push(moduleList[i]);\n      }\n    }\n  };\n  /**\n   * This is a instance method to create an element.\n   *\n   * @param {string} tagName ?\n   * @param {ElementProperties} prop ?\n   * @param {boolean} isVDOM ?\n   * @returns {any} ?\n   * @private\n   */\n  // eslint-disable-next-line\n\n\n  Component.prototype.createElement = function (tagName, prop, isVDOM) {\n    return createElement(tagName, prop);\n  };\n  /**\n   *\n   * @param {Function} handler - handler to be triggered after state Updated.\n   * @param {any} argument - Arguments to be passed to caller.\n   * @returns {void} .\n   * @private\n   */\n  // eslint-disable-next-line\n\n\n  Component.prototype.triggerStateChange = function (handler, argument) {\n    if (this.isReactHybrid) {\n      // eslint-disable-next-line\n      this.setState();\n      this.currentContext = {\n        calls: handler,\n        args: argument\n      };\n    }\n  }; // tslint: enable: no-any\n\n\n  Component.prototype.injectModules = function () {\n    if (this.injectedModules && this.injectedModules.length) {\n      this.moduleLoader.inject(this.requiredModules(), this.injectedModules);\n    }\n  };\n\n  Component.prototype.detectFunction = function (args) {\n    var prop = Object.keys(args);\n\n    if (prop.length) {\n      this[prop[0]] = args[prop[0]];\n    }\n  };\n\n  Component.prototype.mergePersistData = function () {\n    var data;\n\n    if (versionBasedStatePersistence) {\n      data = window.localStorage.getItem(this.getModuleName() + this.element.id + this.ej2StatePersistenceVersion);\n    } else {\n      data = window.localStorage.getItem(this.getModuleName() + this.element.id);\n    }\n\n    if (!(isNullOrUndefined(data) || data === '')) {\n      this.setProperties(JSON.parse(data), true);\n    }\n  };\n\n  Component.prototype.setPersistData = function () {\n    if (!this.isDestroyed) {\n      if (versionBasedStatePersistence) {\n        window.localStorage.setItem(this.getModuleName() + this.element.id + this.ej2StatePersistenceVersion, this.getPersistData());\n      } else {\n        window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());\n      }\n    }\n  }; //tslint:disable-next-line\n\n\n  Component.prototype.renderReactTemplates = function () {//No Code\n  }; // eslint-disable-next-line\n\n\n  Component.prototype.clearTemplate = function (templateName, index) {//No Code\n  };\n\n  Component.prototype.getUniqueID = function (definedName) {\n    if (this.isHistoryChanged()) {\n      componentCount = 0;\n    }\n\n    lastPageID = this.pageID(location.href);\n    lastHistoryLen = history.length;\n    return definedName + '_' + lastPageID + '_' + componentCount++;\n  };\n\n  Component.prototype.pageID = function (url) {\n    var hash = 0;\n\n    if (url.length === 0) {\n      return hash;\n    }\n\n    for (var i = 0; i < url.length; i++) {\n      var char = url.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n  };\n\n  Component.prototype.isHistoryChanged = function () {\n    return lastPageID !== this.pageID(location.href) || lastHistoryLen !== history.length;\n  };\n\n  Component.prototype.addOnPersist = function (options) {\n    var _this = this;\n\n    var persistObj = {};\n\n    for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {\n      var key = options_1[_i];\n      var objValue = void 0; // eslint-disable-next-line\n\n      objValue = getValue(key, this);\n\n      if (!isUndefined(objValue)) {\n        setValue(key, this.getActualProperties(objValue), persistObj);\n      }\n    }\n\n    return JSON.stringify(persistObj, function (key, value) {\n      return _this.getActualProperties(value);\n    });\n  };\n\n  Component.prototype.getActualProperties = function (obj) {\n    if (obj instanceof ChildProperty) {\n      return getValue('properties', obj);\n    } else {\n      return obj;\n    }\n  };\n\n  Component.prototype.ignoreOnPersist = function (options) {\n    return JSON.stringify(this.iterateJsonProperties(this.properties, options));\n  };\n\n  Component.prototype.iterateJsonProperties = function (obj, ignoreList) {\n    var newObj = {};\n\n    var _loop_1 = function (key) {\n      if (ignoreList.indexOf(key) === -1) {\n        // eslint-disable-next-line\n        var value = obj[key];\n\n        if (typeof value === 'object' && !(value instanceof Array)) {\n          var newList = ignoreList.filter(function (str) {\n            return new RegExp(key + '.').test(str);\n          }).map(function (str) {\n            return str.replace(key + '.', '');\n          });\n          newObj[key] = this_1.iterateJsonProperties(this_1.getActualProperties(value), newList);\n        } else {\n          newObj[key] = value;\n        }\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      _loop_1(key);\n    }\n\n    return newObj;\n  };\n\n  __decorate([Property(false)], Component.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property()], Component.prototype, \"enableRtl\", void 0);\n\n  __decorate([Property()], Component.prototype, \"locale\", void 0);\n\n  Component = __decorate([NotifyPropertyChanges], Component);\n  return Component;\n}(Base);\n\nexport { Component }; //Function handling for page navigation detection\n\n/* istanbul ignore next */\n\n(function () {\n  if (typeof window !== 'undefined') {\n    window.addEventListener('popstate',\n    /* istanbul ignore next */\n    function () {\n      componentCount = 0;\n    });\n  }\n})();","map":null,"metadata":{},"sourceType":"module"}