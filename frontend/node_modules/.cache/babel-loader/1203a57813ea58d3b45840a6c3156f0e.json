{"ast":null,"code":"/**\n * Position library\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nvar elementRect;\nvar popupRect;\nvar element;\nvar parentDocument;\nvar fixedParent = false;\n/**\n *\n * @param {HTMLElement} anchor - specifies the element\n * @param {HTMLElement} element - specifies the element\n * @returns {OffsetPosition} - returns the value\n */\n\nexport function calculateRelativeBasedPosition(anchor, element) {\n  var fixedElement = false;\n  var anchorPos = {\n    left: 0,\n    top: 0\n  };\n  var tempAnchor = anchor;\n\n  if (!anchor || !element) {\n    return anchorPos;\n  }\n\n  if (isNullOrUndefined(element.offsetParent) && element.style.position === 'fixed') {\n    fixedElement = true;\n  }\n\n  while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {\n    anchorPos.left += anchor.offsetLeft;\n    anchorPos.top += anchor.offsetTop;\n    anchor = anchor.offsetParent;\n  }\n\n  anchor = tempAnchor;\n\n  while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {\n    anchorPos.left -= anchor.scrollLeft;\n    anchorPos.top -= anchor.scrollTop;\n    anchor = anchor.parentElement;\n  }\n\n  return anchorPos;\n}\n/**\n *\n * @param {Element} currentElement - specifies the element\n * @param {string} positionX - specifies the position\n * @param {string} positionY - specifies the position\n * @param {boolean} parentElement - specifies the boolean\n * @param {ClientRect} targetValues - specifies the client\n * @returns {OffsetPosition} - returns the position\n */\n\nexport function calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {\n  //eslint-disable-next-line\n  popupRect = undefined;\n  popupRect = targetValues;\n  fixedParent = parentElement ? true : false;\n\n  if (!currentElement) {\n    return {\n      left: 0,\n      top: 0\n    };\n  }\n\n  if (!positionX) {\n    positionX = 'left';\n  }\n\n  if (!positionY) {\n    positionY = 'top';\n  }\n\n  parentDocument = currentElement.ownerDocument;\n  element = currentElement;\n  var pos = {\n    left: 0,\n    top: 0\n  };\n  return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);\n}\n/**\n *\n * @param {number} value - specifies the number\n * @param {OffsetPosition} pos - specifies the position\n * @returns {void}\n */\n\nfunction setPosx(value, pos) {\n  pos.left = value;\n}\n/**\n *\n * @param {number} value - specifies the number\n * @param {OffsetPosition} pos - specifies the position\n * @returns {void}\n */\n\n\nfunction setPosy(value, pos) {\n  pos.top = value;\n}\n/**\n *\n * @param {string} posX - specifies the position\n * @param {string} posY - specifies the position\n * @param {OffsetPosition} pos - specifies the position\n * @returns {OffsetPosition} - returns the postion\n */\n\n\nfunction updatePosition(posX, posY, pos) {\n  elementRect = element.getBoundingClientRect();\n\n  switch (posY + posX) {\n    case 'topcenter':\n      setPosx(getElementHCenter(), pos);\n      setPosy(getElementTop(), pos);\n      break;\n\n    case 'topright':\n      setPosx(getElementRight(), pos);\n      setPosy(getElementTop(), pos);\n      break;\n\n    case 'centercenter':\n      setPosx(getElementHCenter(), pos);\n      setPosy(getElementVCenter(), pos);\n      break;\n\n    case 'centerright':\n      setPosx(getElementRight(), pos);\n      setPosy(getElementVCenter(), pos);\n      break;\n\n    case 'centerleft':\n      setPosx(getElementLeft(), pos);\n      setPosy(getElementVCenter(), pos);\n      break;\n\n    case 'bottomcenter':\n      setPosx(getElementHCenter(), pos);\n      setPosy(getElementBottom(), pos);\n      break;\n\n    case 'bottomright':\n      setPosx(getElementRight(), pos);\n      setPosy(getElementBottom(), pos);\n      break;\n\n    case 'bottomleft':\n      setPosx(getElementLeft(), pos);\n      setPosy(getElementBottom(), pos);\n      break;\n\n    default:\n    case 'topleft':\n      setPosx(getElementLeft(), pos);\n      setPosy(getElementTop(), pos);\n      break;\n  }\n\n  return pos;\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getBodyScrollTop() {\n  return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getBodyScrollLeft() {\n  return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementBottom() {\n  return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementVCenter() {\n  return getElementTop() + elementRect.height / 2;\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementTop() {\n  return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementLeft() {\n  return elementRect.left + getBodyScrollLeft();\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementRight() {\n  var popupWidth = element && element.classList.contains('e-date-range-wrapper') ? popupRect ? popupRect.width : 0 : popupRect && elementRect.width >= popupRect.width ? popupRect.width : 0;\n  return elementRect.right + getBodyScrollLeft() - popupWidth;\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementHCenter() {\n  return getElementLeft() + elementRect.width / 2;\n}","map":null,"metadata":{},"sourceType":"module"}