{"ast":null,"code":"var __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = function (obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __spreadValues = function (a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var _i = 0, _e = __getOwnPropSymbols(b); _i < _e.length; _i++) {\n    var prop = _e[_i];\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = function (a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\n\nvar __objRest = function (source, exclude) {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var _i = 0, _e = __getOwnPropSymbols(source); _i < _e.length; _i++) {\n    var prop = _e[_i];\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nvar __async = function (__this, __arguments, generator) {\n  return new Promise(function (resolve, reject) {\n    var fulfilled = function (value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    var rejected = function (value) {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    var step = function (x) {\n      return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    };\n\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n}; // src/query/core/apiState.ts\n\n\nvar QueryStatus;\n\n(function (QueryStatus2) {\n  QueryStatus2[\"uninitialized\"] = \"uninitialized\";\n  QueryStatus2[\"pending\"] = \"pending\";\n  QueryStatus2[\"fulfilled\"] = \"fulfilled\";\n  QueryStatus2[\"rejected\"] = \"rejected\";\n})(QueryStatus || (QueryStatus = {}));\n\nfunction getRequestStatusFlags(status) {\n  return {\n    status: status,\n    isUninitialized: status === QueryStatus.uninitialized,\n    isLoading: status === QueryStatus.pending,\n    isSuccess: status === QueryStatus.fulfilled,\n    isError: status === QueryStatus.rejected\n  };\n} // src/query/utils/isAbsoluteUrl.ts\n\n\nfunction isAbsoluteUrl(url) {\n  return new RegExp(\"(^|:)//\").test(url);\n} // src/query/utils/joinUrls.ts\n\n\nvar withoutTrailingSlash = function (url) {\n  return url.replace(/\\/$/, \"\");\n};\n\nvar withoutLeadingSlash = function (url) {\n  return url.replace(/^\\//, \"\");\n};\n\nfunction joinUrls(base, url) {\n  if (!base) {\n    return url;\n  }\n\n  if (!url) {\n    return base;\n  }\n\n  if (isAbsoluteUrl(url)) {\n    return url;\n  }\n\n  base = withoutTrailingSlash(base);\n  url = withoutLeadingSlash(url);\n  return base + \"/\" + url;\n} // src/query/utils/flatten.ts\n\n\nvar flatten = function (arr) {\n  return [].concat.apply([], arr);\n}; // src/query/utils/isOnline.ts\n\n\nfunction isOnline() {\n  return typeof navigator === \"undefined\" ? true : navigator.onLine === void 0 ? true : navigator.onLine;\n} // src/query/utils/isDocumentVisible.ts\n\n\nfunction isDocumentVisible() {\n  if (typeof document === \"undefined\") {\n    return true;\n  }\n\n  return document.visibilityState !== \"hidden\";\n} // src/query/utils/copyWithStructuralSharing.ts\n\n\nimport { isPlainObject as _iPO } from \"@reduxjs/toolkit\";\nvar isPlainObject = _iPO;\n\nfunction copyWithStructuralSharing(oldObj, newObj) {\n  if (oldObj === newObj || !(isPlainObject(oldObj) && isPlainObject(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\n    return newObj;\n  }\n\n  var newKeys = Object.keys(newObj);\n  var oldKeys = Object.keys(oldObj);\n  var isSameObject = newKeys.length === oldKeys.length;\n  var mergeObj = Array.isArray(newObj) ? [] : {};\n\n  for (var _i = 0, newKeys_1 = newKeys; _i < newKeys_1.length; _i++) {\n    var key = newKeys_1[_i];\n    mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\n    if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];\n  }\n\n  return isSameObject ? oldObj : mergeObj;\n} // src/query/fetchBaseQuery.ts\n\n\nimport { isPlainObject as isPlainObject2 } from \"@reduxjs/toolkit\";\n\nvar defaultFetchFn = function () {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return fetch.apply(void 0, args);\n};\n\nvar defaultValidateStatus = function (response) {\n  return response.status >= 200 && response.status <= 299;\n};\n\nvar isJsonContentType = function (headers) {\n  var _a, _b;\n\n  return (_b = (_a = headers.get(\"content-type\")) == null ? void 0 : _a.trim()) == null ? void 0 : _b.startsWith(\"application/json\");\n};\n\nvar handleResponse = function (response, responseHandler) {\n  return __async(void 0, null, function () {\n    var text;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          if (typeof responseHandler === \"function\") {\n            return [2\n            /*return*/\n            , responseHandler(response)];\n          }\n\n          if (responseHandler === \"text\") {\n            return [2\n            /*return*/\n            , response.text()];\n          }\n\n          if (!(responseHandler === \"json\")) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , response.text()];\n\n        case 1:\n          text = _e.sent();\n          return [2\n          /*return*/\n          , text.length ? JSON.parse(text) : null];\n\n        case 2:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n};\n\nfunction stripUndefined(obj) {\n  if (!isPlainObject2(obj)) {\n    return obj;\n  }\n\n  var copy = __spreadValues({}, obj);\n\n  for (var _i = 0, _e = Object.entries(copy); _i < _e.length; _i++) {\n    var _f = _e[_i],\n        k = _f[0],\n        v = _f[1];\n    if (typeof v === \"undefined\") delete copy[k];\n  }\n\n  return copy;\n}\n\nfunction fetchBaseQuery(_a) {\n  var _this = this;\n\n  if (_a === void 0) {\n    _a = {};\n  }\n\n  var _b = _a,\n      baseUrl = _b.baseUrl,\n      _e = _b.prepareHeaders,\n      prepareHeaders = _e === void 0 ? function (x) {\n    return x;\n  } : _e,\n      _f = _b.fetchFn,\n      fetchFn = _f === void 0 ? defaultFetchFn : _f,\n      paramsSerializer = _b.paramsSerializer,\n      baseFetchOptions = __objRest(_b, [\"baseUrl\", \"prepareHeaders\", \"fetchFn\", \"paramsSerializer\"]);\n\n  if (typeof fetch === \"undefined\" && fetchFn === defaultFetchFn) {\n    console.warn(\"Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.\");\n  }\n\n  return function (arg, api) {\n    return __async(_this, null, function () {\n      var signal, getState, extra, endpoint, forced, type, meta, _a2, url, _e, method, _f, headers, _g, body, _h, params, _j, responseHandler, _k, validateStatus, rest, config, _l, isJsonifiable, divider, query, request, requestClone, response, e_1, responseClone, resultData, responseText, handleResponseError_1, e_2;\n\n      return __generator(this, function (_m) {\n        switch (_m.label) {\n          case 0:\n            signal = api.signal, getState = api.getState, extra = api.extra, endpoint = api.endpoint, forced = api.forced, type = api.type;\n            _a2 = typeof arg == \"string\" ? {\n              url: arg\n            } : arg, url = _a2.url, _e = _a2.method, method = _e === void 0 ? \"GET\" : _e, _f = _a2.headers, headers = _f === void 0 ? new Headers({}) : _f, _g = _a2.body, body = _g === void 0 ? void 0 : _g, _h = _a2.params, params = _h === void 0 ? void 0 : _h, _j = _a2.responseHandler, responseHandler = _j === void 0 ? \"json\" : _j, _k = _a2.validateStatus, validateStatus = _k === void 0 ? defaultValidateStatus : _k, rest = __objRest(_a2, [\"url\", \"method\", \"headers\", \"body\", \"params\", \"responseHandler\", \"validateStatus\"]);\n            config = __spreadValues(__spreadProps(__spreadValues({}, baseFetchOptions), {\n              method: method,\n              signal: signal,\n              body: body\n            }), rest);\n            _l = config;\n            return [4\n            /*yield*/\n            , prepareHeaders(new Headers(stripUndefined(headers)), {\n              getState: getState,\n              extra: extra,\n              endpoint: endpoint,\n              forced: forced,\n              type: type\n            })];\n\n          case 1:\n            _l.headers = _m.sent();\n\n            isJsonifiable = function (body2) {\n              return typeof body2 === \"object\" && (isPlainObject2(body2) || Array.isArray(body2) || typeof body2.toJSON === \"function\");\n            };\n\n            if (!config.headers.has(\"content-type\") && isJsonifiable(body)) {\n              config.headers.set(\"content-type\", \"application/json\");\n            }\n\n            if (body && isJsonContentType(config.headers)) {\n              config.body = JSON.stringify(body);\n            }\n\n            if (params) {\n              divider = ~url.indexOf(\"?\") ? \"&\" : \"?\";\n              query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\n              url += divider + query;\n            }\n\n            url = joinUrls(baseUrl, url);\n            request = new Request(url, config);\n            requestClone = request.clone();\n            meta = {\n              request: requestClone\n            };\n            _m.label = 2;\n\n          case 2:\n            _m.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , fetchFn(request)];\n\n          case 3:\n            response = _m.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            e_1 = _m.sent();\n            return [2\n            /*return*/\n            , {\n              error: {\n                status: \"FETCH_ERROR\",\n                error: String(e_1)\n              },\n              meta: meta\n            }];\n\n          case 5:\n            responseClone = response.clone();\n            meta.response = responseClone;\n            responseText = \"\";\n            _m.label = 6;\n\n          case 6:\n            _m.trys.push([6, 8,, 9]);\n\n            return [4\n            /*yield*/\n            , Promise.all([handleResponse(response, responseHandler).then(function (r) {\n              return resultData = r;\n            }, function (e) {\n              return handleResponseError_1 = e;\n            }), responseClone.text().then(function (r) {\n              return responseText = r;\n            }, function () {})])];\n\n          case 7:\n            _m.sent();\n\n            if (handleResponseError_1) throw handleResponseError_1;\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            e_2 = _m.sent();\n            return [2\n            /*return*/\n            , {\n              error: {\n                status: \"PARSING_ERROR\",\n                originalStatus: response.status,\n                data: responseText,\n                error: String(e_2)\n              },\n              meta: meta\n            }];\n\n          case 9:\n            return [2\n            /*return*/\n            , validateStatus(response, resultData) ? {\n              data: resultData,\n              meta: meta\n            } : {\n              error: {\n                status: response.status,\n                data: resultData\n              },\n              meta: meta\n            }];\n        }\n      });\n    });\n  };\n} // src/query/HandledError.ts\n\n\nvar HandledError =\n/** @class */\nfunction () {\n  function HandledError(value, meta) {\n    if (meta === void 0) {\n      meta = void 0;\n    }\n\n    this.value = value;\n    this.meta = meta;\n  }\n\n  return HandledError;\n}(); // src/query/retry.ts\n\n\nfunction defaultBackoff(attempt, maxRetries) {\n  if (attempt === void 0) {\n    attempt = 0;\n  }\n\n  if (maxRetries === void 0) {\n    maxRetries = 5;\n  }\n\n  return __async(this, null, function () {\n    var attempts, timeout;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          attempts = Math.min(attempt, maxRetries);\n          timeout = ~~((Math.random() + 0.4) * (300 << attempts));\n          return [4\n          /*yield*/\n          , new Promise(function (resolve) {\n            return setTimeout(function (res) {\n              return resolve(res);\n            }, timeout);\n          })];\n\n        case 1:\n          _e.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction fail(e) {\n  throw Object.assign(new HandledError({\n    error: e\n  }), {\n    throwImmediately: true\n  });\n}\n\nvar retryWithBackoff = function (baseQuery, defaultOptions) {\n  return function (args, api, extraOptions) {\n    return __async(void 0, null, function () {\n      var options, retry2, result, e_3;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            options = __spreadValues(__spreadValues({\n              maxRetries: 5,\n              backoff: defaultBackoff\n            }, defaultOptions), extraOptions);\n            retry2 = 0;\n            _e.label = 1;\n\n          case 1:\n            if (!true) return [3\n            /*break*/\n            , 7];\n            _e.label = 2;\n\n          case 2:\n            _e.trys.push([2, 4,, 6]);\n\n            return [4\n            /*yield*/\n            , baseQuery(args, api, extraOptions)];\n\n          case 3:\n            result = _e.sent();\n\n            if (result.error) {\n              throw new HandledError(result);\n            }\n\n            return [2\n            /*return*/\n            , result];\n\n          case 4:\n            e_3 = _e.sent();\n            retry2++;\n\n            if (e_3.throwImmediately || retry2 > options.maxRetries) {\n              if (e_3 instanceof HandledError) {\n                return [2\n                /*return*/\n                , e_3.value];\n              }\n\n              throw e_3;\n            }\n\n            return [4\n            /*yield*/\n            , options.backoff(retry2, options.maxRetries)];\n\n          case 5:\n            _e.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [3\n            /*break*/\n            , 1];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n};\n\nvar retry = /* @__PURE__ */Object.assign(retryWithBackoff, {\n  fail: fail\n}); // src/query/core/setupListeners.ts\n\nimport { createAction } from \"@reduxjs/toolkit\";\nvar onFocus = /* @__PURE__ */createAction(\"__rtkq/focused\");\nvar onFocusLost = /* @__PURE__ */createAction(\"__rtkq/unfocused\");\nvar onOnline = /* @__PURE__ */createAction(\"__rtkq/online\");\nvar onOffline = /* @__PURE__ */createAction(\"__rtkq/offline\");\nvar initialized = false;\n\nfunction setupListeners(dispatch, customHandler) {\n  function defaultHandler() {\n    var handleFocus = function () {\n      return dispatch(onFocus());\n    };\n\n    var handleFocusLost = function () {\n      return dispatch(onFocusLost());\n    };\n\n    var handleOnline = function () {\n      return dispatch(onOnline());\n    };\n\n    var handleOffline = function () {\n      return dispatch(onOffline());\n    };\n\n    var handleVisibilityChange = function () {\n      if (window.document.visibilityState === \"visible\") {\n        handleFocus();\n      } else {\n        handleFocusLost();\n      }\n    };\n\n    if (!initialized) {\n      if (typeof window !== \"undefined\" && window.addEventListener) {\n        window.addEventListener(\"visibilitychange\", handleVisibilityChange, false);\n        window.addEventListener(\"focus\", handleFocus, false);\n        window.addEventListener(\"online\", handleOnline, false);\n        window.addEventListener(\"offline\", handleOffline, false);\n        initialized = true;\n      }\n    }\n\n    var unsubscribe = function () {\n      window.removeEventListener(\"focus\", handleFocus);\n      window.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n      initialized = false;\n    };\n\n    return unsubscribe;\n  }\n\n  return customHandler ? customHandler(dispatch, {\n    onFocus: onFocus,\n    onFocusLost: onFocusLost,\n    onOffline: onOffline,\n    onOnline: onOnline\n  }) : defaultHandler();\n} // src/query/core/buildSelectors.ts\n\n\nimport { createNextState, createSelector } from \"@reduxjs/toolkit\"; // src/query/endpointDefinitions.ts\n\nvar DefinitionType;\n\n(function (DefinitionType2) {\n  DefinitionType2[\"query\"] = \"query\";\n  DefinitionType2[\"mutation\"] = \"mutation\";\n})(DefinitionType || (DefinitionType = {}));\n\nfunction isQueryDefinition(e) {\n  return e.type === DefinitionType.query;\n}\n\nfunction isMutationDefinition(e) {\n  return e.type === DefinitionType.mutation;\n}\n\nfunction calculateProvidedBy(description, result, error, queryArg, meta, assertTagTypes) {\n  if (isFunction(description)) {\n    return description(result, error, queryArg, meta).map(expandTagDescription).map(assertTagTypes);\n  }\n\n  if (Array.isArray(description)) {\n    return description.map(expandTagDescription).map(assertTagTypes);\n  }\n\n  return [];\n}\n\nfunction isFunction(t) {\n  return typeof t === \"function\";\n}\n\nfunction expandTagDescription(description) {\n  return typeof description === \"string\" ? {\n    type: description\n  } : description;\n} // src/query/core/buildSlice.ts\n\n\nimport { combineReducers, createAction as createAction2, createSlice, isAnyOf, isFulfilled as isFulfilled2, isRejectedWithValue as isRejectedWithValue2 } from \"@reduxjs/toolkit\"; // src/query/core/buildThunks.ts\n\nimport { isAllOf, isFulfilled, isPending, isRejected, isRejectedWithValue } from \"@reduxjs/toolkit\";\nimport { isDraftable, produceWithPatches } from \"immer\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\n\nfunction defaultTransformResponse(baseQueryReturnValue) {\n  return baseQueryReturnValue;\n}\n\nfunction buildThunks(_e) {\n  var _this = this;\n\n  var reducerPath = _e.reducerPath,\n      baseQuery = _e.baseQuery,\n      endpointDefinitions = _e.context.endpointDefinitions,\n      serializeQueryArgs = _e.serializeQueryArgs,\n      api = _e.api;\n\n  var patchQueryData = function (endpointName, args, patches) {\n    return function (dispatch) {\n      var endpointDefinition = endpointDefinitions[endpointName];\n      dispatch(api.internalActions.queryResultPatched({\n        queryCacheKey: serializeQueryArgs({\n          queryArgs: args,\n          endpointDefinition: endpointDefinition,\n          endpointName: endpointName\n        }),\n        patches: patches\n      }));\n    };\n  };\n\n  var updateQueryData = function (endpointName, args, updateRecipe) {\n    return function (dispatch, getState) {\n      var _e, _f;\n\n      var currentState = api.endpoints[endpointName].select(args)(getState());\n      var ret = {\n        patches: [],\n        inversePatches: [],\n        undo: function () {\n          return dispatch(api.util.patchQueryData(endpointName, args, ret.inversePatches));\n        }\n      };\n\n      if (currentState.status === QueryStatus.uninitialized) {\n        return ret;\n      }\n\n      if (\"data\" in currentState) {\n        if (isDraftable(currentState.data)) {\n          var _g = produceWithPatches(currentState.data, updateRecipe),\n              patches = _g[1],\n              inversePatches = _g[2];\n\n          (_e = ret.patches).push.apply(_e, patches);\n\n          (_f = ret.inversePatches).push.apply(_f, inversePatches);\n        } else {\n          var value = updateRecipe(currentState.data);\n          ret.patches.push({\n            op: \"replace\",\n            path: [],\n            value: value\n          });\n          ret.inversePatches.push({\n            op: \"replace\",\n            path: [],\n            value: currentState.data\n          });\n        }\n      }\n\n      dispatch(api.util.patchQueryData(endpointName, args, ret.patches));\n      return ret;\n    };\n  };\n\n  var executeEndpoint = function (_0, _1) {\n    return __async(_this, [_0, _1], function (arg, _e) {\n      var endpointDefinition, transformResponse, result, baseQueryApi_1, what, err, _i, _f, key, _g, error_1;\n\n      var signal = _e.signal,\n          rejectWithValue = _e.rejectWithValue,\n          fulfillWithValue = _e.fulfillWithValue,\n          dispatch = _e.dispatch,\n          getState = _e.getState,\n          extra = _e.extra;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            endpointDefinition = endpointDefinitions[arg.endpointName];\n            _h.label = 1;\n\n          case 1:\n            _h.trys.push([1, 7,, 8]);\n\n            transformResponse = defaultTransformResponse;\n            result = void 0;\n            baseQueryApi_1 = {\n              signal: signal,\n              dispatch: dispatch,\n              getState: getState,\n              extra: extra,\n              endpoint: arg.endpointName,\n              type: arg.type,\n              forced: arg.type === \"query\" ? isForcedQuery(arg, getState()) : void 0\n            };\n            if (!endpointDefinition.query) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , baseQuery(endpointDefinition.query(arg.originalArgs), baseQueryApi_1, endpointDefinition.extraOptions)];\n\n          case 2:\n            result = _h.sent();\n\n            if (endpointDefinition.transformResponse) {\n              transformResponse = endpointDefinition.transformResponse;\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            return [4\n            /*yield*/\n            , endpointDefinition.queryFn(arg.originalArgs, baseQueryApi_1, endpointDefinition.extraOptions, function (arg2) {\n              return baseQuery(arg2, baseQueryApi_1, endpointDefinition.extraOptions);\n            })];\n\n          case 4:\n            result = _h.sent();\n            _h.label = 5;\n\n          case 5:\n            if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n              what = endpointDefinition.query ? \"`baseQuery`\" : \"`queryFn`\";\n              err = void 0;\n\n              if (!result) {\n                err = what + \" did not return anything.\";\n              } else if (typeof result !== \"object\") {\n                err = what + \" did not return an object.\";\n              } else if (result.error && result.data) {\n                err = what + \" returned an object containing both `error` and `result`.\";\n              } else if (result.error === void 0 && result.data === void 0) {\n                err = what + \" returned an object containing neither a valid `error` and `result`. At least one of them should not be `undefined`\";\n              } else {\n                for (_i = 0, _f = Object.keys(result); _i < _f.length; _i++) {\n                  key = _f[_i];\n\n                  if (key !== \"error\" && key !== \"data\" && key !== \"meta\") {\n                    err = \"The object returned by \" + what + \" has the unknown property \" + key + \".\";\n                    break;\n                  }\n                }\n              }\n\n              if (err) {\n                console.error(\"Error encountered handling the endpoint \" + arg.endpointName + \".\\n              \" + err + \"\\n              It needs to return an object with either the shape `{ data: <value> }` or `{ error: <value> }` that may contain an optional `meta` property.\\n              Object returned was:\", result);\n              }\n            }\n\n            if (result.error) throw new HandledError(result.error, result.meta);\n            _g = fulfillWithValue;\n            return [4\n            /*yield*/\n            , transformResponse(result.data, result.meta, arg.originalArgs)];\n\n          case 6:\n            return [2\n            /*return*/\n            , _g.apply(void 0, [_h.sent(), {\n              fulfilledTimeStamp: Date.now(),\n              baseQueryMeta: result.meta\n            }])];\n\n          case 7:\n            error_1 = _h.sent();\n\n            if (error_1 instanceof HandledError) {\n              return [2\n              /*return*/\n              , rejectWithValue(error_1.value, {\n                baseQueryMeta: error_1.meta\n              })];\n            }\n\n            if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n              console.error(\"An unhandled error occured processing a request for the endpoint \\\"\" + arg.endpointName + \"\\\".\\nIn the case of an unhandled error, no tags will be \\\"provided\\\" or \\\"invalidated\\\".\", error_1);\n            } else {\n              console.error(error_1);\n            }\n\n            throw error_1;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  function isForcedQuery(arg, state) {\n    var _a, _b, _c, _d;\n\n    var requestState = (_b = (_a = state[reducerPath]) == null ? void 0 : _a.queries) == null ? void 0 : _b[arg.queryCacheKey];\n    var baseFetchOnMountOrArgChange = (_c = state[reducerPath]) == null ? void 0 : _c.config.refetchOnMountOrArgChange;\n    var fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;\n    var refetchVal = (_d = arg.forceRefetch) != null ? _d : arg.subscribe && baseFetchOnMountOrArgChange;\n\n    if (refetchVal) {\n      return refetchVal === true || (Number(new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;\n    }\n\n    return false;\n  }\n\n  var queryThunk = createAsyncThunk(reducerPath + \"/executeQuery\", executeEndpoint, {\n    getPendingMeta: function () {\n      return {\n        startedTimeStamp: Date.now()\n      };\n    },\n    condition: function (arg, _e) {\n      var getState = _e.getState;\n\n      var _a, _b;\n\n      var state = getState();\n      var requestState = (_b = (_a = state[reducerPath]) == null ? void 0 : _a.queries) == null ? void 0 : _b[arg.queryCacheKey];\n      var fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;\n      if ((requestState == null ? void 0 : requestState.status) === \"pending\") return false;\n      if (isForcedQuery(arg, state)) return true;\n      if (fulfilledVal) return false;\n      return true;\n    },\n    dispatchConditionRejection: true\n  });\n  var mutationThunk = createAsyncThunk(reducerPath + \"/executeMutation\", executeEndpoint, {\n    getPendingMeta: function () {\n      return {\n        startedTimeStamp: Date.now()\n      };\n    }\n  });\n\n  var hasTheForce = function (options) {\n    return \"force\" in options;\n  };\n\n  var hasMaxAge = function (options) {\n    return \"ifOlderThan\" in options;\n  };\n\n  var prefetch = function (endpointName, arg, options) {\n    return function (dispatch, getState) {\n      var force = hasTheForce(options) && options.force;\n      var maxAge = hasMaxAge(options) && options.ifOlderThan;\n\n      var queryAction = function (force2) {\n        if (force2 === void 0) {\n          force2 = true;\n        }\n\n        return api.endpoints[endpointName].initiate(arg, {\n          forceRefetch: force2\n        });\n      };\n\n      var latestStateValue = api.endpoints[endpointName].select(arg)(getState());\n\n      if (force) {\n        dispatch(queryAction());\n      } else if (maxAge) {\n        var lastFulfilledTs = latestStateValue == null ? void 0 : latestStateValue.fulfilledTimeStamp;\n\n        if (!lastFulfilledTs) {\n          dispatch(queryAction());\n          return;\n        }\n\n        var shouldRetrigger = (Number(new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;\n\n        if (shouldRetrigger) {\n          dispatch(queryAction());\n        }\n      } else {\n        dispatch(queryAction(false));\n      }\n    };\n  };\n\n  function matchesEndpoint(endpointName) {\n    return function (action) {\n      var _a, _b;\n\n      return ((_b = (_a = action == null ? void 0 : action.meta) == null ? void 0 : _a.arg) == null ? void 0 : _b.endpointName) === endpointName;\n    };\n  }\n\n  function buildMatchThunkActions(thunk, endpointName) {\n    return {\n      matchPending: isAllOf(isPending(thunk), matchesEndpoint(endpointName)),\n      matchFulfilled: isAllOf(isFulfilled(thunk), matchesEndpoint(endpointName)),\n      matchRejected: isAllOf(isRejected(thunk), matchesEndpoint(endpointName))\n    };\n  }\n\n  return {\n    queryThunk: queryThunk,\n    mutationThunk: mutationThunk,\n    prefetch: prefetch,\n    updateQueryData: updateQueryData,\n    patchQueryData: patchQueryData,\n    buildMatchThunkActions: buildMatchThunkActions\n  };\n}\n\nfunction calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {\n  return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], isFulfilled(action) ? action.payload : void 0, isRejectedWithValue(action) ? action.payload : void 0, action.meta.arg.originalArgs, \"baseQueryMeta\" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);\n} // src/query/core/buildSlice.ts\n\n\nimport { applyPatches } from \"immer\";\n\nfunction updateQuerySubstateIfExists(state, queryCacheKey, update) {\n  var substate = state[queryCacheKey];\n\n  if (substate) {\n    update(substate);\n  }\n}\n\nfunction getMutationCacheKey(id) {\n  var _a;\n\n  return (_a = \"arg\" in id ? id.arg.fixedCacheKey : id.fixedCacheKey) != null ? _a : id.requestId;\n}\n\nfunction updateMutationSubstateIfExists(state, id, update) {\n  var substate = state[getMutationCacheKey(id)];\n\n  if (substate) {\n    update(substate);\n  }\n}\n\nvar initialState = {};\n\nfunction buildSlice(_e) {\n  var reducerPath = _e.reducerPath,\n      queryThunk = _e.queryThunk,\n      mutationThunk = _e.mutationThunk,\n      _f = _e.context,\n      definitions = _f.endpointDefinitions,\n      apiUid = _f.apiUid,\n      extractRehydrationInfo = _f.extractRehydrationInfo,\n      hasRehydrationInfo = _f.hasRehydrationInfo,\n      assertTagType = _e.assertTagType,\n      config = _e.config;\n  var resetApiState = createAction2(reducerPath + \"/resetApiState\");\n  var querySlice = createSlice({\n    name: reducerPath + \"/queries\",\n    initialState: initialState,\n    reducers: {\n      removeQueryResult: function (draft, _e) {\n        var queryCacheKey = _e.payload.queryCacheKey;\n        delete draft[queryCacheKey];\n      },\n      queryResultPatched: function (draft, _e) {\n        var _f = _e.payload,\n            queryCacheKey = _f.queryCacheKey,\n            patches = _f.patches;\n        updateQuerySubstateIfExists(draft, queryCacheKey, function (substate) {\n          substate.data = applyPatches(substate.data, patches.concat());\n        });\n      }\n    },\n    extraReducers: function (builder) {\n      builder.addCase(queryThunk.pending, function (draft, _e) {\n        var meta = _e.meta,\n            arg = _e.meta.arg;\n\n        var _a, _b;\n\n        if (arg.subscribe) {\n          (_b = draft[_a = arg.queryCacheKey]) != null ? _b : draft[_a] = {\n            status: QueryStatus.uninitialized,\n            endpointName: arg.endpointName\n          };\n        }\n\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, function (substate) {\n          substate.status = QueryStatus.pending;\n          substate.requestId = meta.requestId;\n\n          if (arg.originalArgs !== void 0) {\n            substate.originalArgs = arg.originalArgs;\n          }\n\n          substate.startedTimeStamp = meta.startedTimeStamp;\n        });\n      }).addCase(queryThunk.fulfilled, function (draft, _e) {\n        var meta = _e.meta,\n            payload = _e.payload;\n        updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, function (substate) {\n          var _a;\n\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = QueryStatus.fulfilled;\n          substate.data = ((_a = definitions[meta.arg.endpointName].structuralSharing) != null ? _a : true) ? copyWithStructuralSharing(substate.data, payload) : payload;\n          delete substate.error;\n          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n      }).addCase(queryThunk.rejected, function (draft, _e) {\n        var _f = _e.meta,\n            condition = _f.condition,\n            arg = _f.arg,\n            requestId = _f.requestId,\n            error = _e.error,\n            payload = _e.payload;\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, function (substate) {\n          if (condition) {} else {\n            if (substate.requestId !== requestId) return;\n            substate.status = QueryStatus.rejected;\n            substate.error = payload != null ? payload : error;\n          }\n        });\n      }).addMatcher(hasRehydrationInfo, function (draft, action) {\n        var queries = extractRehydrationInfo(action).queries;\n\n        for (var _i = 0, _e = Object.entries(queries); _i < _e.length; _i++) {\n          var _f = _e[_i],\n              key = _f[0],\n              entry = _f[1];\n\n          if ((entry == null ? void 0 : entry.status) === QueryStatus.fulfilled || (entry == null ? void 0 : entry.status) === QueryStatus.rejected) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  var mutationSlice = createSlice({\n    name: reducerPath + \"/mutations\",\n    initialState: initialState,\n    reducers: {\n      removeMutationResult: function (draft, _e) {\n        var payload = _e.payload;\n        var cacheKey = getMutationCacheKey(payload);\n\n        if (cacheKey in draft) {\n          delete draft[cacheKey];\n        }\n      }\n    },\n    extraReducers: function (builder) {\n      builder.addCase(mutationThunk.pending, function (draft, _e) {\n        var meta = _e.meta,\n            _f = _e.meta,\n            requestId = _f.requestId,\n            arg = _f.arg,\n            startedTimeStamp = _f.startedTimeStamp;\n        if (!arg.track) return;\n        draft[getMutationCacheKey(meta)] = {\n          requestId: requestId,\n          status: QueryStatus.pending,\n          endpointName: arg.endpointName,\n          startedTimeStamp: startedTimeStamp\n        };\n      }).addCase(mutationThunk.fulfilled, function (draft, _e) {\n        var payload = _e.payload,\n            meta = _e.meta;\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, function (substate) {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = QueryStatus.fulfilled;\n          substate.data = payload;\n          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n      }).addCase(mutationThunk.rejected, function (draft, _e) {\n        var payload = _e.payload,\n            error = _e.error,\n            meta = _e.meta;\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, function (substate) {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = QueryStatus.rejected;\n          substate.error = payload != null ? payload : error;\n        });\n      }).addMatcher(hasRehydrationInfo, function (draft, action) {\n        var mutations = extractRehydrationInfo(action).mutations;\n\n        for (var _i = 0, _e = Object.entries(mutations); _i < _e.length; _i++) {\n          var _f = _e[_i],\n              key = _f[0],\n              entry = _f[1];\n\n          if (((entry == null ? void 0 : entry.status) === QueryStatus.fulfilled || (entry == null ? void 0 : entry.status) === QueryStatus.rejected) && key !== (entry == null ? void 0 : entry.requestId)) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  var invalidationSlice = createSlice({\n    name: reducerPath + \"/invalidation\",\n    initialState: initialState,\n    reducers: {},\n    extraReducers: function (builder) {\n      builder.addCase(querySlice.actions.removeQueryResult, function (draft, _e) {\n        var queryCacheKey = _e.payload.queryCacheKey;\n\n        for (var _i = 0, _f = Object.values(draft); _i < _f.length; _i++) {\n          var tagTypeSubscriptions = _f[_i];\n\n          for (var _g = 0, _h = Object.values(tagTypeSubscriptions); _g < _h.length; _g++) {\n            var idSubscriptions = _h[_g];\n            var foundAt = idSubscriptions.indexOf(queryCacheKey);\n\n            if (foundAt !== -1) {\n              idSubscriptions.splice(foundAt, 1);\n            }\n          }\n        }\n      }).addMatcher(hasRehydrationInfo, function (draft, action) {\n        var _a, _b, _c, _d;\n\n        var provided = extractRehydrationInfo(action).provided;\n\n        for (var _i = 0, _e = Object.entries(provided); _i < _e.length; _i++) {\n          var _f = _e[_i],\n              type = _f[0],\n              incomingTags = _f[1];\n\n          for (var _g = 0, _h = Object.entries(incomingTags); _g < _h.length; _g++) {\n            var _j = _h[_g],\n                id = _j[0],\n                cacheKeys = _j[1];\n            var subscribedQueries = (_d = (_b = (_a = draft[type]) != null ? _a : draft[type] = {})[_c = id || \"__internal_without_id\"]) != null ? _d : _b[_c] = [];\n\n            for (var _k = 0, cacheKeys_1 = cacheKeys; _k < cacheKeys_1.length; _k++) {\n              var queryCacheKey = cacheKeys_1[_k];\n              var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n\n              if (!alreadySubscribed) {\n                subscribedQueries.push(queryCacheKey);\n              }\n            }\n          }\n        }\n      }).addMatcher(isAnyOf(isFulfilled2(queryThunk), isRejectedWithValue2(queryThunk)), function (draft, action) {\n        var _a, _b, _c, _d;\n\n        var providedTags = calculateProvidedByThunk(action, \"providesTags\", definitions, assertTagType);\n        var queryCacheKey = action.meta.arg.queryCacheKey;\n\n        for (var _i = 0, providedTags_1 = providedTags; _i < providedTags_1.length; _i++) {\n          var _e = providedTags_1[_i],\n              type = _e.type,\n              id = _e.id;\n          var subscribedQueries = (_d = (_b = (_a = draft[type]) != null ? _a : draft[type] = {})[_c = id || \"__internal_without_id\"]) != null ? _d : _b[_c] = [];\n          var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n\n          if (!alreadySubscribed) {\n            subscribedQueries.push(queryCacheKey);\n          }\n        }\n      });\n    }\n  });\n  var subscriptionSlice = createSlice({\n    name: reducerPath + \"/subscriptions\",\n    initialState: initialState,\n    reducers: {\n      updateSubscriptionOptions: function (draft, _e) {\n        var _f = _e.payload,\n            queryCacheKey = _f.queryCacheKey,\n            requestId = _f.requestId,\n            options = _f.options;\n\n        var _a;\n\n        if ((_a = draft == null ? void 0 : draft[queryCacheKey]) == null ? void 0 : _a[requestId]) {\n          draft[queryCacheKey][requestId] = options;\n        }\n      },\n      unsubscribeQueryResult: function (draft, _e) {\n        var _f = _e.payload,\n            queryCacheKey = _f.queryCacheKey,\n            requestId = _f.requestId;\n\n        if (draft[queryCacheKey]) {\n          delete draft[queryCacheKey][requestId];\n        }\n      }\n    },\n    extraReducers: function (builder) {\n      builder.addCase(querySlice.actions.removeQueryResult, function (draft, _e) {\n        var queryCacheKey = _e.payload.queryCacheKey;\n        delete draft[queryCacheKey];\n      }).addCase(queryThunk.pending, function (draft, _e) {\n        var _f = _e.meta,\n            arg = _f.arg,\n            requestId = _f.requestId;\n\n        var _a, _b, _c, _d;\n\n        if (arg.subscribe) {\n          var substate = (_b = draft[_a = arg.queryCacheKey]) != null ? _b : draft[_a] = {};\n          substate[requestId] = (_d = (_c = arg.subscriptionOptions) != null ? _c : substate[requestId]) != null ? _d : {};\n        }\n      }).addCase(queryThunk.rejected, function (draft, _e) {\n        var _f = _e.meta,\n            condition = _f.condition,\n            arg = _f.arg,\n            requestId = _f.requestId,\n            error = _e.error,\n            payload = _e.payload;\n\n        var _a, _b, _c, _d;\n\n        if (condition && arg.subscribe) {\n          var substate = (_b = draft[_a = arg.queryCacheKey]) != null ? _b : draft[_a] = {};\n          substate[requestId] = (_d = (_c = arg.subscriptionOptions) != null ? _c : substate[requestId]) != null ? _d : {};\n        }\n      }).addMatcher(hasRehydrationInfo, function (draft) {\n        return __spreadValues({}, draft);\n      });\n    }\n  });\n  var configSlice = createSlice({\n    name: reducerPath + \"/config\",\n    initialState: __spreadValues({\n      online: isOnline(),\n      focused: isDocumentVisible(),\n      middlewareRegistered: false\n    }, config),\n    reducers: {\n      middlewareRegistered: function (state, _e) {\n        var payload = _e.payload;\n        state.middlewareRegistered = state.middlewareRegistered === \"conflict\" || apiUid !== payload ? \"conflict\" : true;\n      }\n    },\n    extraReducers: function (builder) {\n      builder.addCase(onOnline, function (state) {\n        state.online = true;\n      }).addCase(onOffline, function (state) {\n        state.online = false;\n      }).addCase(onFocus, function (state) {\n        state.focused = true;\n      }).addCase(onFocusLost, function (state) {\n        state.focused = false;\n      }).addMatcher(hasRehydrationInfo, function (draft) {\n        return __spreadValues({}, draft);\n      });\n    }\n  });\n  var combinedReducer = combineReducers({\n    queries: querySlice.reducer,\n    mutations: mutationSlice.reducer,\n    provided: invalidationSlice.reducer,\n    subscriptions: subscriptionSlice.reducer,\n    config: configSlice.reducer\n  });\n\n  var reducer = function (state, action) {\n    return combinedReducer(resetApiState.match(action) ? void 0 : state, action);\n  };\n\n  var actions = __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, configSlice.actions), querySlice.actions), subscriptionSlice.actions), mutationSlice.actions), {\n    unsubscribeMutationResult: mutationSlice.actions.removeMutationResult,\n    resetApiState: resetApiState\n  });\n\n  return {\n    reducer: reducer,\n    actions: actions\n  };\n} // src/query/core/buildSelectors.ts\n\n\nvar skipToken = /* @__PURE__ */Symbol.for(\"RTKQ/skipToken\");\nvar skipSelector = skipToken;\nvar initialSubState = {\n  status: QueryStatus.uninitialized\n};\nvar defaultQuerySubState = /* @__PURE__ */createNextState(initialSubState, function () {});\nvar defaultMutationSubState = /* @__PURE__ */createNextState(initialSubState, function () {});\n\nfunction buildSelectors(_e) {\n  var serializeQueryArgs = _e.serializeQueryArgs,\n      reducerPath = _e.reducerPath;\n  return {\n    buildQuerySelector: buildQuerySelector,\n    buildMutationSelector: buildMutationSelector,\n    selectInvalidatedBy: selectInvalidatedBy\n  };\n\n  function withRequestFlags(substate) {\n    return __spreadValues(__spreadValues({}, substate), getRequestStatusFlags(substate.status));\n  }\n\n  function selectInternalState(rootState) {\n    var state = rootState[reducerPath];\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!state) {\n        if (selectInternalState.triggered) return state;\n        selectInternalState.triggered = true;\n        console.error(\"Error: No data found at `state.\" + reducerPath + \"`. Did you forget to add the reducer to the store?\");\n      }\n    }\n\n    return state;\n  }\n\n  function buildQuerySelector(endpointName, endpointDefinition) {\n    return function (queryArgs) {\n      var selectQuerySubState = createSelector(selectInternalState, function (internalState) {\n        var _a, _b;\n\n        return (_b = queryArgs === skipToken ? void 0 : (_a = internalState == null ? void 0 : internalState.queries) == null ? void 0 : _a[serializeQueryArgs({\n          queryArgs: queryArgs,\n          endpointDefinition: endpointDefinition,\n          endpointName: endpointName\n        })]) != null ? _b : defaultQuerySubState;\n      });\n      return createSelector(selectQuerySubState, withRequestFlags);\n    };\n  }\n\n  function buildMutationSelector() {\n    return function (id) {\n      var _a;\n\n      var mutationId;\n\n      if (typeof id === \"object\") {\n        mutationId = (_a = getMutationCacheKey(id)) != null ? _a : skipToken;\n      } else {\n        mutationId = id;\n      }\n\n      var selectMutationSubstate = createSelector(selectInternalState, function (internalState) {\n        var _a2, _b;\n\n        return (_b = mutationId === skipToken ? void 0 : (_a2 = internalState == null ? void 0 : internalState.mutations) == null ? void 0 : _a2[mutationId]) != null ? _b : defaultMutationSubState;\n      });\n      return createSelector(selectMutationSubstate, withRequestFlags);\n    };\n  }\n\n  function selectInvalidatedBy(state, tags) {\n    var _a;\n\n    var apiState = state[reducerPath];\n    var toInvalidate = new Set();\n\n    for (var _i = 0, _e = tags.map(expandTagDescription); _i < _e.length; _i++) {\n      var tag = _e[_i];\n      var provided = apiState.provided[tag.type];\n\n      if (!provided) {\n        continue;\n      }\n\n      var invalidateSubscriptions = (_a = tag.id !== void 0 ? provided[tag.id] : flatten(Object.values(provided))) != null ? _a : [];\n\n      for (var _f = 0, invalidateSubscriptions_1 = invalidateSubscriptions; _f < invalidateSubscriptions_1.length; _f++) {\n        var invalidate = invalidateSubscriptions_1[_f];\n        toInvalidate.add(invalidate);\n      }\n    }\n\n    return flatten(Array.from(toInvalidate.values()).map(function (queryCacheKey) {\n      var querySubState = apiState.queries[queryCacheKey];\n      return querySubState ? [{\n        queryCacheKey: queryCacheKey,\n        endpointName: querySubState.endpointName,\n        originalArgs: querySubState.originalArgs\n      }] : [];\n    }));\n  }\n} // src/query/defaultSerializeQueryArgs.ts\n\n\nimport { isPlainObject as isPlainObject3 } from \"@reduxjs/toolkit\";\n\nvar defaultSerializeQueryArgs = function (_e) {\n  var endpointName = _e.endpointName,\n      queryArgs = _e.queryArgs;\n  return endpointName + \"(\" + JSON.stringify(queryArgs, function (key, value) {\n    return isPlainObject3(value) ? Object.keys(value).sort().reduce(function (acc, key2) {\n      acc[key2] = value[key2];\n      return acc;\n    }, {}) : value;\n  }) + \")\";\n}; // src/query/createApi.ts\n\n\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { defaultMemoize } from \"reselect\";\n\nfunction buildCreateApi() {\n  var modules = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    modules[_i] = arguments[_i];\n  }\n\n  return function baseCreateApi(options) {\n    var extractRehydrationInfo = defaultMemoize(function (action) {\n      var _a, _b;\n\n      return (_b = options.extractRehydrationInfo) == null ? void 0 : _b.call(options, action, {\n        reducerPath: (_a = options.reducerPath) != null ? _a : \"api\"\n      });\n    });\n\n    var optionsWithDefaults = __spreadProps(__spreadValues({\n      reducerPath: \"api\",\n      serializeQueryArgs: defaultSerializeQueryArgs,\n      keepUnusedDataFor: 60,\n      refetchOnMountOrArgChange: false,\n      refetchOnFocus: false,\n      refetchOnReconnect: false\n    }, options), {\n      extractRehydrationInfo: extractRehydrationInfo,\n      tagTypes: __spreadArray([], options.tagTypes || [])\n    });\n\n    var context = {\n      endpointDefinitions: {},\n      batch: function (fn) {\n        fn();\n      },\n      apiUid: nanoid(),\n      extractRehydrationInfo: extractRehydrationInfo,\n      hasRehydrationInfo: defaultMemoize(function (action) {\n        return extractRehydrationInfo(action) != null;\n      })\n    };\n    var api = {\n      injectEndpoints: injectEndpoints,\n      enhanceEndpoints: function (_e) {\n        var addTagTypes = _e.addTagTypes,\n            endpoints = _e.endpoints;\n\n        if (addTagTypes) {\n          for (var _i = 0, addTagTypes_1 = addTagTypes; _i < addTagTypes_1.length; _i++) {\n            var eT = addTagTypes_1[_i];\n\n            if (!optionsWithDefaults.tagTypes.includes(eT)) {\n              optionsWithDefaults.tagTypes.push(eT);\n            }\n          }\n        }\n\n        if (endpoints) {\n          for (var _f = 0, _g = Object.entries(endpoints); _f < _g.length; _f++) {\n            var _h = _g[_f],\n                endpointName = _h[0],\n                partialDefinition = _h[1];\n\n            if (typeof partialDefinition === \"function\") {\n              partialDefinition(context.endpointDefinitions[endpointName]);\n            }\n\n            Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\n          }\n        }\n\n        return api;\n      }\n    };\n    var initializedModules = modules.map(function (m) {\n      return m.init(api, optionsWithDefaults, context);\n    });\n\n    function injectEndpoints(inject) {\n      var evaluatedEndpoints = inject.endpoints({\n        query: function (x) {\n          return __spreadProps(__spreadValues({}, x), {\n            type: DefinitionType.query\n          });\n        },\n        mutation: function (x) {\n          return __spreadProps(__spreadValues({}, x), {\n            type: DefinitionType.mutation\n          });\n        }\n      });\n\n      for (var _i = 0, _e = Object.entries(evaluatedEndpoints); _i < _e.length; _i++) {\n        var _f = _e[_i],\n            endpointName = _f[0],\n            definition = _f[1];\n\n        if (!inject.overrideExisting && endpointName in context.endpointDefinitions) {\n          if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n            console.error(\"called `injectEndpoints` to override already-existing endpointName \" + endpointName + \" without specifying `overrideExisting: true`\");\n          }\n\n          continue;\n        }\n\n        context.endpointDefinitions[endpointName] = definition;\n\n        for (var _g = 0, initializedModules_1 = initializedModules; _g < initializedModules_1.length; _g++) {\n          var m = initializedModules_1[_g];\n          m.injectEndpoint(endpointName, definition);\n        }\n      }\n\n      return api;\n    }\n\n    return api.injectEndpoints({\n      endpoints: options.endpoints\n    });\n  };\n} // src/query/fakeBaseQuery.ts\n\n\nfunction fakeBaseQuery() {\n  return function () {\n    throw new Error(\"When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.\");\n  };\n} // src/query/core/buildMiddleware/index.ts\n\n\nimport { compose } from \"redux\";\nimport { createAction as createAction3 } from \"@reduxjs/toolkit\"; // src/query/core/buildMiddleware/cacheCollection.ts\n\nvar build = function (_e) {\n  var reducerPath = _e.reducerPath,\n      api = _e.api,\n      context = _e.context;\n  var _f = api.internalActions,\n      removeQueryResult = _f.removeQueryResult,\n      unsubscribeQueryResult = _f.unsubscribeQueryResult;\n  return function (mwApi) {\n    var currentRemovalTimeouts = {};\n    return function (next) {\n      return function (action) {\n        var _a;\n\n        var result = next(action);\n\n        if (unsubscribeQueryResult.match(action)) {\n          var state = mwApi.getState()[reducerPath];\n          var queryCacheKey = action.payload.queryCacheKey;\n          handleUnsubscribe(queryCacheKey, (_a = state.queries[queryCacheKey]) == null ? void 0 : _a.endpointName, mwApi, state.config);\n        }\n\n        if (api.util.resetApiState.match(action)) {\n          for (var _i = 0, _e = Object.entries(currentRemovalTimeouts); _i < _e.length; _i++) {\n            var _f = _e[_i],\n                key = _f[0],\n                timeout = _f[1];\n            if (timeout) clearTimeout(timeout);\n            delete currentRemovalTimeouts[key];\n          }\n        }\n\n        if (context.hasRehydrationInfo(action)) {\n          var state = mwApi.getState()[reducerPath];\n          var queries = context.extractRehydrationInfo(action).queries;\n\n          for (var _g = 0, _h = Object.entries(queries); _g < _h.length; _g++) {\n            var _j = _h[_g],\n                queryCacheKey = _j[0],\n                queryState = _j[1];\n            handleUnsubscribe(queryCacheKey, queryState == null ? void 0 : queryState.endpointName, mwApi, state.config);\n          }\n        }\n\n        return result;\n      };\n    };\n\n    function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {\n      var _a;\n\n      var endpointDefinition = context.endpointDefinitions[endpointName];\n      var keepUnusedDataFor = (_a = endpointDefinition == null ? void 0 : endpointDefinition.keepUnusedDataFor) != null ? _a : config.keepUnusedDataFor;\n      var currentTimeout = currentRemovalTimeouts[queryCacheKey];\n\n      if (currentTimeout) {\n        clearTimeout(currentTimeout);\n      }\n\n      currentRemovalTimeouts[queryCacheKey] = setTimeout(function () {\n        var subscriptions = api2.getState()[reducerPath].subscriptions[queryCacheKey];\n\n        if (!subscriptions || Object.keys(subscriptions).length === 0) {\n          api2.dispatch(removeQueryResult({\n            queryCacheKey: queryCacheKey\n          }));\n        }\n\n        delete currentRemovalTimeouts[queryCacheKey];\n      }, keepUnusedDataFor * 1e3);\n    }\n  };\n}; // src/query/core/buildMiddleware/invalidationByTags.ts\n\n\nimport { isAnyOf as isAnyOf2, isFulfilled as isFulfilled3, isRejectedWithValue as isRejectedWithValue3 } from \"@reduxjs/toolkit\";\n\nvar build2 = function (_e) {\n  var reducerPath = _e.reducerPath,\n      context = _e.context,\n      endpointDefinitions = _e.context.endpointDefinitions,\n      mutationThunk = _e.mutationThunk,\n      api = _e.api,\n      assertTagType = _e.assertTagType,\n      refetchQuery = _e.refetchQuery;\n  var removeQueryResult = api.internalActions.removeQueryResult;\n  return function (mwApi) {\n    return function (next) {\n      return function (action) {\n        var result = next(action);\n\n        if (isAnyOf2(isFulfilled3(mutationThunk), isRejectedWithValue3(mutationThunk))(action)) {\n          invalidateTags(calculateProvidedByThunk(action, \"invalidatesTags\", endpointDefinitions, assertTagType), mwApi);\n        }\n\n        if (api.util.invalidateTags.match(action)) {\n          invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);\n        }\n\n        return result;\n      };\n    };\n  };\n\n  function invalidateTags(tags, mwApi) {\n    var rootState = mwApi.getState();\n    var state = rootState[reducerPath];\n    var toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\n    context.batch(function () {\n      var valuesArray = Array.from(toInvalidate.values());\n\n      for (var _i = 0, valuesArray_1 = valuesArray; _i < valuesArray_1.length; _i++) {\n        var queryCacheKey = valuesArray_1[_i].queryCacheKey;\n        var querySubState = state.queries[queryCacheKey];\n        var subscriptionSubState = state.subscriptions[queryCacheKey];\n\n        if (querySubState && subscriptionSubState) {\n          if (Object.keys(subscriptionSubState).length === 0) {\n            mwApi.dispatch(removeQueryResult({\n              queryCacheKey: queryCacheKey\n            }));\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\n            mwApi.dispatch(refetchQuery(querySubState, queryCacheKey));\n          } else {}\n        }\n      }\n    });\n  }\n}; // src/query/core/buildMiddleware/polling.ts\n\n\nvar build3 = function (_e) {\n  var reducerPath = _e.reducerPath,\n      queryThunk = _e.queryThunk,\n      api = _e.api,\n      refetchQuery = _e.refetchQuery;\n  return function (mwApi) {\n    var currentPolls = {};\n    return function (next) {\n      return function (action) {\n        var result = next(action);\n\n        if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\n          updatePollingInterval(action.payload, mwApi);\n        }\n\n        if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\n          updatePollingInterval(action.meta.arg, mwApi);\n        }\n\n        if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\n          startNextPoll(action.meta.arg, mwApi);\n        }\n\n        if (api.util.resetApiState.match(action)) {\n          clearPolls();\n        }\n\n        return result;\n      };\n    };\n\n    function startNextPoll(_e, api2) {\n      var queryCacheKey = _e.queryCacheKey;\n      var state = api2.getState()[reducerPath];\n      var querySubState = state.queries[queryCacheKey];\n      var subscriptions = state.subscriptions[queryCacheKey];\n      if (!querySubState || querySubState.status === QueryStatus.uninitialized) return;\n      var lowestPollingInterval = findLowestPollingInterval(subscriptions);\n      if (!Number.isFinite(lowestPollingInterval)) return;\n      var currentPoll = currentPolls[queryCacheKey];\n\n      if (currentPoll == null ? void 0 : currentPoll.timeout) {\n        clearTimeout(currentPoll.timeout);\n        currentPoll.timeout = void 0;\n      }\n\n      var nextPollTimestamp = Date.now() + lowestPollingInterval;\n      var currentInterval = currentPolls[queryCacheKey] = {\n        nextPollTimestamp: nextPollTimestamp,\n        pollingInterval: lowestPollingInterval,\n        timeout: setTimeout(function () {\n          currentInterval.timeout = void 0;\n          api2.dispatch(refetchQuery(querySubState, queryCacheKey));\n        }, lowestPollingInterval)\n      };\n    }\n\n    function updatePollingInterval(_e, api2) {\n      var queryCacheKey = _e.queryCacheKey;\n      var state = api2.getState()[reducerPath];\n      var querySubState = state.queries[queryCacheKey];\n      var subscriptions = state.subscriptions[queryCacheKey];\n\n      if (!querySubState || querySubState.status === QueryStatus.uninitialized) {\n        return;\n      }\n\n      var lowestPollingInterval = findLowestPollingInterval(subscriptions);\n\n      if (!Number.isFinite(lowestPollingInterval)) {\n        cleanupPollForKey(queryCacheKey);\n        return;\n      }\n\n      var currentPoll = currentPolls[queryCacheKey];\n      var nextPollTimestamp = Date.now() + lowestPollingInterval;\n\n      if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n        startNextPoll({\n          queryCacheKey: queryCacheKey\n        }, api2);\n      }\n    }\n\n    function cleanupPollForKey(key) {\n      var existingPoll = currentPolls[key];\n\n      if (existingPoll == null ? void 0 : existingPoll.timeout) {\n        clearTimeout(existingPoll.timeout);\n      }\n\n      delete currentPolls[key];\n    }\n\n    function clearPolls() {\n      for (var _i = 0, _e = Object.keys(currentPolls); _i < _e.length; _i++) {\n        var key = _e[_i];\n        cleanupPollForKey(key);\n      }\n    }\n  };\n\n  function findLowestPollingInterval(subscribers) {\n    if (subscribers === void 0) {\n      subscribers = {};\n    }\n\n    var lowestPollingInterval = Number.POSITIVE_INFINITY;\n\n    for (var _i = 0, _e = Object.values(subscribers); _i < _e.length; _i++) {\n      var subscription = _e[_i];\n      if (!!subscription.pollingInterval) lowestPollingInterval = Math.min(subscription.pollingInterval, lowestPollingInterval);\n    }\n\n    return lowestPollingInterval;\n  }\n}; // src/query/core/buildMiddleware/windowEventHandling.ts\n\n\nvar build4 = function (_e) {\n  var reducerPath = _e.reducerPath,\n      context = _e.context,\n      api = _e.api,\n      refetchQuery = _e.refetchQuery;\n  var removeQueryResult = api.internalActions.removeQueryResult;\n  return function (mwApi) {\n    return function (next) {\n      return function (action) {\n        var result = next(action);\n\n        if (onFocus.match(action)) {\n          refetchValidQueries(mwApi, \"refetchOnFocus\");\n        }\n\n        if (onOnline.match(action)) {\n          refetchValidQueries(mwApi, \"refetchOnReconnect\");\n        }\n\n        return result;\n      };\n    };\n  };\n\n  function refetchValidQueries(api2, type) {\n    var state = api2.getState()[reducerPath];\n    var queries = state.queries;\n    var subscriptions = state.subscriptions;\n    context.batch(function () {\n      for (var _i = 0, _e = Object.keys(subscriptions); _i < _e.length; _i++) {\n        var queryCacheKey = _e[_i];\n        var querySubState = queries[queryCacheKey];\n        var subscriptionSubState = subscriptions[queryCacheKey];\n        if (!subscriptionSubState || !querySubState) continue;\n        var shouldRefetch = Object.values(subscriptionSubState).some(function (sub) {\n          return sub[type] === true;\n        }) || Object.values(subscriptionSubState).every(function (sub) {\n          return sub[type] === void 0;\n        }) && state.config[type];\n\n        if (shouldRefetch) {\n          if (Object.keys(subscriptionSubState).length === 0) {\n            api2.dispatch(removeQueryResult({\n              queryCacheKey: queryCacheKey\n            }));\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\n            api2.dispatch(refetchQuery(querySubState, queryCacheKey));\n          }\n        }\n      }\n    });\n  }\n}; // src/query/core/buildMiddleware/cacheLifecycle.ts\n\n\nimport { isAsyncThunkAction, isFulfilled as isFulfilled4 } from \"@reduxjs/toolkit\";\nvar neverResolvedError = new Error(\"Promise never resolved before cacheEntryRemoved.\");\n\nvar build5 = function (_e) {\n  var api = _e.api,\n      reducerPath = _e.reducerPath,\n      context = _e.context,\n      queryThunk = _e.queryThunk,\n      mutationThunk = _e.mutationThunk;\n  var isQueryThunk = isAsyncThunkAction(queryThunk);\n  var isMutationThunk = isAsyncThunkAction(mutationThunk);\n  var isFullfilledThunk = isFulfilled4(queryThunk, mutationThunk);\n  return function (mwApi) {\n    var lifecycleMap = {};\n    return function (next) {\n      return function (action) {\n        var stateBefore = mwApi.getState();\n        var result = next(action);\n        var cacheKey = getCacheKey(action);\n\n        if (queryThunk.pending.match(action)) {\n          var oldState = stateBefore[reducerPath].queries[cacheKey];\n          var state = mwApi.getState()[reducerPath].queries[cacheKey];\n\n          if (!oldState && state) {\n            handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n          }\n        } else if (mutationThunk.pending.match(action)) {\n          var state = mwApi.getState()[reducerPath].mutations[cacheKey];\n\n          if (state) {\n            handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n          }\n        } else if (isFullfilledThunk(action)) {\n          var lifecycle = lifecycleMap[cacheKey];\n\n          if (lifecycle == null ? void 0 : lifecycle.valueResolved) {\n            lifecycle.valueResolved({\n              data: action.payload,\n              meta: action.meta.baseQueryMeta\n            });\n            delete lifecycle.valueResolved;\n          }\n        } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\n          var lifecycle = lifecycleMap[cacheKey];\n\n          if (lifecycle) {\n            delete lifecycleMap[cacheKey];\n            lifecycle.cacheEntryRemoved();\n          }\n        } else if (api.util.resetApiState.match(action)) {\n          for (var _i = 0, _e = Object.entries(lifecycleMap); _i < _e.length; _i++) {\n            var _f = _e[_i],\n                cacheKey2 = _f[0],\n                lifecycle = _f[1];\n            delete lifecycleMap[cacheKey2];\n            lifecycle.cacheEntryRemoved();\n          }\n        }\n\n        return result;\n      };\n    };\n\n    function getCacheKey(action) {\n      if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;\n      if (isMutationThunk(action)) return action.meta.requestId;\n      if (api.internalActions.removeQueryResult.match(action)) return action.payload.queryCacheKey;\n      if (api.internalActions.removeMutationResult.match(action)) return getMutationCacheKey(action.payload);\n      return \"\";\n    }\n\n    function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi2, requestId) {\n      var endpointDefinition = context.endpointDefinitions[endpointName];\n      var onCacheEntryAdded = endpointDefinition == null ? void 0 : endpointDefinition.onCacheEntryAdded;\n      if (!onCacheEntryAdded) return;\n      var lifecycle = {};\n      var cacheEntryRemoved = new Promise(function (resolve) {\n        lifecycle.cacheEntryRemoved = resolve;\n      });\n      var cacheDataLoaded = Promise.race([new Promise(function (resolve) {\n        lifecycle.valueResolved = resolve;\n      }), cacheEntryRemoved.then(function () {\n        throw neverResolvedError;\n      })]);\n      cacheDataLoaded.catch(function () {});\n      lifecycleMap[queryCacheKey] = lifecycle;\n      var selector = api.endpoints[endpointName].select(endpointDefinition.type === DefinitionType.query ? originalArgs : queryCacheKey);\n      var extra = mwApi2.dispatch(function (_, __, extra2) {\n        return extra2;\n      });\n\n      var lifecycleApi = __spreadProps(__spreadValues({}, mwApi2), {\n        getCacheEntry: function () {\n          return selector(mwApi2.getState());\n        },\n        requestId: requestId,\n        extra: extra,\n        updateCachedData: endpointDefinition.type === DefinitionType.query ? function (updateRecipe) {\n          return mwApi2.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe));\n        } : void 0,\n        cacheDataLoaded: cacheDataLoaded,\n        cacheEntryRemoved: cacheEntryRemoved\n      });\n\n      var runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\n      Promise.resolve(runningHandler).catch(function (e) {\n        if (e === neverResolvedError) return;\n        throw e;\n      });\n    }\n  };\n}; // src/query/core/buildMiddleware/queryLifecycle.ts\n\n\nimport { isPending as isPending2, isRejected as isRejected2, isFulfilled as isFulfilled5 } from \"@reduxjs/toolkit\";\n\nvar build6 = function (_e) {\n  var api = _e.api,\n      context = _e.context,\n      queryThunk = _e.queryThunk,\n      mutationThunk = _e.mutationThunk;\n  var isPendingThunk = isPending2(queryThunk, mutationThunk);\n  var isRejectedThunk = isRejected2(queryThunk, mutationThunk);\n  var isFullfilledThunk = isFulfilled5(queryThunk, mutationThunk);\n  return function (mwApi) {\n    var lifecycleMap = {};\n    return function (next) {\n      return function (action) {\n        var _a, _b, _c;\n\n        var result = next(action);\n\n        if (isPendingThunk(action)) {\n          var _e = action.meta,\n              requestId = _e.requestId,\n              _f = _e.arg,\n              endpointName_1 = _f.endpointName,\n              originalArgs_1 = _f.originalArgs;\n          var endpointDefinition = context.endpointDefinitions[endpointName_1];\n          var onQueryStarted = endpointDefinition == null ? void 0 : endpointDefinition.onQueryStarted;\n\n          if (onQueryStarted) {\n            var lifecycle_1 = {};\n            var queryFulfilled = new Promise(function (resolve, reject) {\n              lifecycle_1.resolve = resolve;\n              lifecycle_1.reject = reject;\n            });\n            queryFulfilled.catch(function () {});\n            lifecycleMap[requestId] = lifecycle_1;\n            var selector_1 = api.endpoints[endpointName_1].select(endpointDefinition.type === DefinitionType.query ? originalArgs_1 : requestId);\n            var extra = mwApi.dispatch(function (_, __, extra2) {\n              return extra2;\n            });\n\n            var lifecycleApi = __spreadProps(__spreadValues({}, mwApi), {\n              getCacheEntry: function () {\n                return selector_1(mwApi.getState());\n              },\n              requestId: requestId,\n              extra: extra,\n              updateCachedData: endpointDefinition.type === DefinitionType.query ? function (updateRecipe) {\n                return mwApi.dispatch(api.util.updateQueryData(endpointName_1, originalArgs_1, updateRecipe));\n              } : void 0,\n              queryFulfilled: queryFulfilled\n            });\n\n            onQueryStarted(originalArgs_1, lifecycleApi);\n          }\n        } else if (isFullfilledThunk(action)) {\n          var _g = action.meta,\n              requestId = _g.requestId,\n              baseQueryMeta = _g.baseQueryMeta;\n          (_a = lifecycleMap[requestId]) == null ? void 0 : _a.resolve({\n            data: action.payload,\n            meta: baseQueryMeta\n          });\n          delete lifecycleMap[requestId];\n        } else if (isRejectedThunk(action)) {\n          var _h = action.meta,\n              requestId = _h.requestId,\n              rejectedWithValue = _h.rejectedWithValue,\n              baseQueryMeta = _h.baseQueryMeta;\n          (_c = lifecycleMap[requestId]) == null ? void 0 : _c.reject({\n            error: (_b = action.payload) != null ? _b : action.error,\n            isUnhandledError: !rejectedWithValue,\n            meta: baseQueryMeta\n          });\n          delete lifecycleMap[requestId];\n        }\n\n        return result;\n      };\n    };\n  };\n}; // src/query/core/buildMiddleware/devMiddleware.ts\n\n\nvar build7 = function (_e) {\n  var api = _e.api,\n      apiUid = _e.context.apiUid,\n      reducerPath = _e.reducerPath;\n  return function (mwApi) {\n    var initialized2 = false;\n    return function (next) {\n      return function (action) {\n        var _a, _b;\n\n        if (!initialized2) {\n          initialized2 = true;\n          mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n\n        var result = next(action);\n\n        if (api.util.resetApiState.match(action)) {\n          mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n\n        if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n          if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && ((_b = (_a = mwApi.getState()[reducerPath]) == null ? void 0 : _a.config) == null ? void 0 : _b.middlewareRegistered) === \"conflict\") {\n            console.warn(\"There is a mismatch between slice and middleware for the reducerPath \\\"\" + reducerPath + \"\\\".\\nYou can only have one api per reducer path, this will lead to crashes in various situations!\" + (reducerPath === \"api\" ? \"\\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!\" : \"\"));\n          }\n        }\n\n        return result;\n      };\n    };\n  };\n}; // src/query/core/buildMiddleware/index.ts\n\n\nfunction buildMiddleware(input) {\n  var reducerPath = input.reducerPath,\n      queryThunk = input.queryThunk;\n  var actions = {\n    invalidateTags: createAction3(reducerPath + \"/invalidateTags\")\n  };\n  var middlewares = [build7, build, build2, build3, build4, build5, build6].map(function (build8) {\n    return build8(__spreadProps(__spreadValues({}, input), {\n      refetchQuery: refetchQuery\n    }));\n  });\n\n  var middleware = function (mwApi) {\n    return function (next) {\n      var applied = compose.apply(void 0, middlewares.map(function (middleware2) {\n        return middleware2(mwApi);\n      }))(next);\n      return function (action) {\n        if (mwApi.getState()[reducerPath]) {\n          return applied(action);\n        }\n\n        return next(action);\n      };\n    };\n  };\n\n  return {\n    middleware: middleware,\n    actions: actions\n  };\n\n  function refetchQuery(querySubState, queryCacheKey, override) {\n    if (override === void 0) {\n      override = {};\n    }\n\n    return queryThunk(__spreadValues({\n      type: \"query\",\n      endpointName: querySubState.endpointName,\n      originalArgs: querySubState.originalArgs,\n      subscribe: false,\n      forceRefetch: true,\n      queryCacheKey: queryCacheKey\n    }, override));\n  }\n} // src/query/core/buildInitiate.ts\n\n\nfunction buildInitiate(_e) {\n  var serializeQueryArgs = _e.serializeQueryArgs,\n      queryThunk = _e.queryThunk,\n      mutationThunk = _e.mutationThunk,\n      api = _e.api,\n      context = _e.context;\n  var runningQueries = {};\n  var runningMutations = {};\n  var _f = api.internalActions,\n      unsubscribeQueryResult = _f.unsubscribeQueryResult,\n      removeMutationResult = _f.removeMutationResult,\n      updateSubscriptionOptions = _f.updateSubscriptionOptions;\n  return {\n    buildInitiateQuery: buildInitiateQuery,\n    buildInitiateMutation: buildInitiateMutation,\n    getRunningOperationPromises: getRunningOperationPromises,\n    getRunningOperationPromise: getRunningOperationPromise\n  };\n\n  function getRunningOperationPromise(endpointName, argOrRequestId) {\n    var endpointDefinition = context.endpointDefinitions[endpointName];\n\n    if (endpointDefinition.type === DefinitionType.query) {\n      var queryCacheKey = serializeQueryArgs({\n        queryArgs: argOrRequestId,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      });\n      return runningQueries[queryCacheKey];\n    } else {\n      return runningMutations[argOrRequestId];\n    }\n  }\n\n  function getRunningOperationPromises() {\n    return __spreadArray(__spreadArray([], Object.values(runningQueries)), Object.values(runningMutations)).filter(function (t) {\n      return !!t;\n    });\n  }\n\n  function middlewareWarning(getState) {\n    var _a, _b;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (middlewareWarning.triggered) return;\n      var registered = (_b = (_a = getState()[api.reducerPath]) == null ? void 0 : _a.config) == null ? void 0 : _b.middlewareRegistered;\n\n      if (registered !== void 0) {\n        ;\n        middlewareWarning.triggered = true;\n      }\n\n      if (registered === false) {\n        console.warn(\"Warning: Middleware for RTK-Query API at reducerPath \\\"\" + api.reducerPath + \"\\\" has not been added to the store.\\nFeatures like automatic cache collection, automatic refetching etc. will not be available.\");\n      }\n    }\n  }\n\n  function buildInitiateQuery(endpointName, endpointDefinition) {\n    var queryAction = function (arg, _e) {\n      var _f = _e === void 0 ? {} : _e,\n          _g = _f.subscribe,\n          subscribe = _g === void 0 ? true : _g,\n          forceRefetch = _f.forceRefetch,\n          subscriptionOptions = _f.subscriptionOptions;\n\n      return function (dispatch, getState) {\n        var queryCacheKey = serializeQueryArgs({\n          queryArgs: arg,\n          endpointDefinition: endpointDefinition,\n          endpointName: endpointName\n        });\n        var thunk = queryThunk({\n          type: \"query\",\n          subscribe: subscribe,\n          forceRefetch: forceRefetch,\n          subscriptionOptions: subscriptionOptions,\n          endpointName: endpointName,\n          originalArgs: arg,\n          queryCacheKey: queryCacheKey\n        });\n        var thunkResult = dispatch(thunk);\n        middlewareWarning(getState);\n        var requestId = thunkResult.requestId,\n            abort = thunkResult.abort;\n        var statePromise = Object.assign(Promise.all([runningQueries[queryCacheKey], thunkResult]).then(function () {\n          return api.endpoints[endpointName].select(arg)(getState());\n        }), {\n          arg: arg,\n          requestId: requestId,\n          subscriptionOptions: subscriptionOptions,\n          queryCacheKey: queryCacheKey,\n          abort: abort,\n          unwrap: function () {\n            return __async(this, null, function () {\n              var result;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , statePromise];\n\n                  case 1:\n                    result = _e.sent();\n\n                    if (result.isError) {\n                      throw result.error;\n                    }\n\n                    return [2\n                    /*return*/\n                    , result.data];\n                }\n              });\n            });\n          },\n          refetch: function () {\n            dispatch(queryAction(arg, {\n              subscribe: false,\n              forceRefetch: true\n            }));\n          },\n          unsubscribe: function () {\n            if (subscribe) dispatch(unsubscribeQueryResult({\n              queryCacheKey: queryCacheKey,\n              requestId: requestId\n            }));\n          },\n          updateSubscriptionOptions: function (options) {\n            statePromise.subscriptionOptions = options;\n            dispatch(updateSubscriptionOptions({\n              endpointName: endpointName,\n              requestId: requestId,\n              queryCacheKey: queryCacheKey,\n              options: options\n            }));\n          }\n        });\n\n        if (!runningQueries[queryCacheKey]) {\n          runningQueries[queryCacheKey] = statePromise;\n          statePromise.then(function () {\n            delete runningQueries[queryCacheKey];\n          });\n        }\n\n        return statePromise;\n      };\n    };\n\n    return queryAction;\n  }\n\n  function buildInitiateMutation(endpointName) {\n    return function (arg, _e) {\n      var _f = _e === void 0 ? {} : _e,\n          _g = _f.track,\n          track = _g === void 0 ? true : _g,\n          fixedCacheKey = _f.fixedCacheKey;\n\n      return function (dispatch, getState) {\n        var thunk = mutationThunk({\n          type: \"mutation\",\n          endpointName: endpointName,\n          originalArgs: arg,\n          track: track,\n          fixedCacheKey: fixedCacheKey\n        });\n        var thunkResult = dispatch(thunk);\n        middlewareWarning(getState);\n        var requestId = thunkResult.requestId,\n            abort = thunkResult.abort,\n            unwrap = thunkResult.unwrap;\n        var returnValuePromise = thunkResult.unwrap().then(function (data) {\n          return {\n            data: data\n          };\n        }).catch(function (error) {\n          return {\n            error: error\n          };\n        });\n\n        var reset = function () {\n          dispatch(removeMutationResult({\n            requestId: requestId,\n            fixedCacheKey: fixedCacheKey\n          }));\n        };\n\n        var ret = Object.assign(returnValuePromise, {\n          arg: thunkResult.arg,\n          requestId: requestId,\n          abort: abort,\n          unwrap: unwrap,\n          unsubscribe: reset,\n          reset: reset\n        });\n        runningMutations[requestId] = ret;\n        ret.then(function () {\n          delete runningMutations[requestId];\n        });\n\n        if (fixedCacheKey) {\n          runningMutations[fixedCacheKey] = ret;\n          ret.then(function () {\n            if (runningMutations[fixedCacheKey] === ret) delete runningMutations[fixedCacheKey];\n          });\n        }\n\n        return ret;\n      };\n    };\n  }\n} // src/query/tsHelpers.ts\n\n\nfunction assertCast(v) {}\n\nfunction safeAssign(target) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  Object.assign.apply(Object, __spreadArray([target], args));\n} // src/query/core/module.ts\n\n\nimport { enablePatches } from \"immer\";\nvar coreModuleName = /* @__PURE__ */Symbol();\n\nvar coreModule = function () {\n  return {\n    name: coreModuleName,\n    init: function (api, _e, context) {\n      var baseQuery = _e.baseQuery,\n          tagTypes = _e.tagTypes,\n          reducerPath = _e.reducerPath,\n          serializeQueryArgs = _e.serializeQueryArgs,\n          keepUnusedDataFor = _e.keepUnusedDataFor,\n          refetchOnMountOrArgChange = _e.refetchOnMountOrArgChange,\n          refetchOnFocus = _e.refetchOnFocus,\n          refetchOnReconnect = _e.refetchOnReconnect;\n      enablePatches();\n      assertCast(serializeQueryArgs);\n\n      var assertTagType = function (tag) {\n        if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n          if (!tagTypes.includes(tag.type)) {\n            console.error(\"Tag type '\" + tag.type + \"' was used, but not specified in `tagTypes`!\");\n          }\n        }\n\n        return tag;\n      };\n\n      Object.assign(api, {\n        reducerPath: reducerPath,\n        endpoints: {},\n        internalActions: {\n          onOnline: onOnline,\n          onOffline: onOffline,\n          onFocus: onFocus,\n          onFocusLost: onFocusLost\n        },\n        util: {}\n      });\n\n      var _f = buildThunks({\n        baseQuery: baseQuery,\n        reducerPath: reducerPath,\n        context: context,\n        api: api,\n        serializeQueryArgs: serializeQueryArgs\n      }),\n          queryThunk = _f.queryThunk,\n          mutationThunk = _f.mutationThunk,\n          patchQueryData = _f.patchQueryData,\n          updateQueryData = _f.updateQueryData,\n          prefetch = _f.prefetch,\n          buildMatchThunkActions = _f.buildMatchThunkActions;\n\n      var _g = buildSlice({\n        context: context,\n        queryThunk: queryThunk,\n        mutationThunk: mutationThunk,\n        reducerPath: reducerPath,\n        assertTagType: assertTagType,\n        config: {\n          refetchOnFocus: refetchOnFocus,\n          refetchOnReconnect: refetchOnReconnect,\n          refetchOnMountOrArgChange: refetchOnMountOrArgChange,\n          keepUnusedDataFor: keepUnusedDataFor,\n          reducerPath: reducerPath\n        }\n      }),\n          reducer = _g.reducer,\n          sliceActions = _g.actions;\n\n      safeAssign(api.util, {\n        patchQueryData: patchQueryData,\n        updateQueryData: updateQueryData,\n        prefetch: prefetch,\n        resetApiState: sliceActions.resetApiState\n      });\n      safeAssign(api.internalActions, sliceActions);\n      Object.defineProperty(api.util, \"updateQueryResult\", {\n        get: function () {\n          if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n            console.warn(\"`api.util.updateQueryResult` has been renamed to `api.util.updateQueryData`, please change your code accordingly\");\n          }\n\n          return api.util.updateQueryData;\n        }\n      });\n      Object.defineProperty(api.util, \"patchQueryResult\", {\n        get: function () {\n          if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n            console.warn(\"`api.util.patchQueryResult` has been renamed to `api.util.patchQueryData`, please change your code accordingly\");\n          }\n\n          return api.util.patchQueryData;\n        }\n      });\n\n      var _h = buildMiddleware({\n        reducerPath: reducerPath,\n        context: context,\n        queryThunk: queryThunk,\n        mutationThunk: mutationThunk,\n        api: api,\n        assertTagType: assertTagType\n      }),\n          middleware = _h.middleware,\n          middlewareActions = _h.actions;\n\n      safeAssign(api.util, middlewareActions);\n      safeAssign(api, {\n        reducer: reducer,\n        middleware: middleware\n      });\n\n      var _j = buildSelectors({\n        serializeQueryArgs: serializeQueryArgs,\n        reducerPath: reducerPath\n      }),\n          buildQuerySelector = _j.buildQuerySelector,\n          buildMutationSelector = _j.buildMutationSelector,\n          selectInvalidatedBy = _j.selectInvalidatedBy;\n\n      safeAssign(api.util, {\n        selectInvalidatedBy: selectInvalidatedBy\n      });\n\n      var _k = buildInitiate({\n        queryThunk: queryThunk,\n        mutationThunk: mutationThunk,\n        api: api,\n        serializeQueryArgs: serializeQueryArgs,\n        context: context\n      }),\n          buildInitiateQuery = _k.buildInitiateQuery,\n          buildInitiateMutation = _k.buildInitiateMutation,\n          getRunningOperationPromises = _k.getRunningOperationPromises,\n          getRunningOperationPromise = _k.getRunningOperationPromise;\n\n      safeAssign(api.util, {\n        getRunningOperationPromises: getRunningOperationPromises,\n        getRunningOperationPromise: getRunningOperationPromise\n      });\n      return {\n        name: coreModuleName,\n        injectEndpoint: function (endpointName, definition) {\n          var _a, _b;\n\n          var anyApi = api;\n          (_b = (_a = anyApi.endpoints)[endpointName]) != null ? _b : _a[endpointName] = {};\n\n          if (isQueryDefinition(definition)) {\n            safeAssign(anyApi.endpoints[endpointName], {\n              select: buildQuerySelector(endpointName, definition),\n              initiate: buildInitiateQuery(endpointName, definition)\n            }, buildMatchThunkActions(queryThunk, endpointName));\n          } else if (isMutationDefinition(definition)) {\n            safeAssign(anyApi.endpoints[endpointName], {\n              select: buildMutationSelector(),\n              initiate: buildInitiateMutation(endpointName)\n            }, buildMatchThunkActions(mutationThunk, endpointName));\n          }\n        }\n      };\n    }\n  };\n}; // src/query/core/index.ts\n\n\nvar createApi = /* @__PURE__ */buildCreateApi(coreModule());\nexport { QueryStatus, buildCreateApi, copyWithStructuralSharing, coreModule, createApi, fakeBaseQuery, fetchBaseQuery, retry, setupListeners, skipSelector, skipToken }; //# sourceMappingURL=rtk-query.esm.js.map","map":null,"metadata":{},"sourceType":"module"}